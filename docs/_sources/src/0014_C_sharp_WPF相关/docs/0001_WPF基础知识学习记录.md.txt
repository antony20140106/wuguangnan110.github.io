# 简述

WPF一些学习记录

## 参考

## 知识点

### 1.点击控件长时间无响应问题
* 参考

* [C# & WPF 随手小记之一 ——初探async await 实现多线程处理](https://www.cnblogs.com/provissy/p/4122112.html)

在 WPF 中维护响应式 UI 的同时执行长时间运行的操作的两个示例。 一种方法使用 BackgroundWorker 对象，而第二种方法使用较新的 async/await 关键字。



#### async/await

```C#
       private async Task<string> AsyncTask_Get_MTK_Log()
        {
            string Text = Environment.CurrentDirectory;
            try
            {
                return await Task.Run(() =>
                {
                    p.StartInfo.Arguments = "/c adb pull /sdcard/debuglogger .";

                    p.Start();

                    string Adb_Output = p.StandardOutput.ReadToEnd();
                    p.Close();

                    return Text;
                });
            }
            catch
            {
                return "获取打印失败";
            }

        }
        private async void Button_Click_Get_MTK_Log(object sender, RoutedEventArgs e)
        {
            if (adb_status)
            {
                try
                {
                    TextBox1.Text = "正在从手机中拷贝...";
                    TextBox1.Text = "拷贝完成，路径：" + await AsyncTask_Get_MTK_Log() + "\\debuglogger";

                }
                catch
                {
                    MessageBox.Show("请连接手机adb");
                }
            }
        }
```

#### BackgroundWorker实例

* [C# BackgroundWorker用法详解](https://www.jb51.net/article/111019.htm)
* [C#backgroundWorker用法](https://www.cnblogs.com/javier520/p/10842161.html)

* backgroundwork主要的事件及参数：
 * 1.DoWork——当执行BackgroundWorker.RunWorkerAsync方法时会触发该事件，并且传递DoWorkEventArgs参数;
 * 2.RunWorkerCompleted——异步操作完成或中途终止会触发该事件。
 * 3.ProgressChanged——操作处理中获得的处理状态变化，通过BackgroundWorker.ReportProgress(int)方法触发该事件，并且传递ProgressChangedEventArgs,其中包含了处理的百分比,这个参数在UI界面上设置progressbar控件。 

```C#

       private void Button_Click_Unlock_Android(object sender, RoutedEventArgs e)
        {
            TextBox1.Text = "开始对机器进行解锁操作...";
            this.RunBackgroundWorkerStyle();
            
        }

        private void RunBackgroundWorkerStyle()
        {
            // Make sure we specify that we support progress reporting and cancellation.
            this.ProgressBar.Value = 0;
            this.ProgressBar.Maximum = 90;
            this.backgroundWorker = new BackgroundWorker()
            {
                WorkerReportsProgress = true,
                WorkerSupportsCancellation = true
            };

            // Handler for progress changed events. Update the ProgressBar,
            // process the data and log an event.
            this.backgroundWorker.ProgressChanged += (s, pe) =>
            {
                //修改进度条的显示。
                this.ProgressBar.Value = pe.ProgressPercentage;
                TextBox1.AppendText("\r\n" + "正在执行命令：" + pe.UserState.ToString());
            };

            this.backgroundWorker.DoWork += (s, pe) =>
            {
                //string resultStr = "";
                //RunCMDCommand(out resultStr,"adb reboot bootloader", "fastboot flashing unlock", "adb wait-for-device", "adb root", "adb disable-verity", "adb reboot", "adb wait-for-device", "adb root", "adb remount");
                //Console.WriteLine(resultStr);   
                int sum = 0;
                string result = Execute("adb reboot bootloader", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb reboot bootloader");
                result = Execute("fastboot flashing unlock", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "fastboot flashing unlock");
                TextBox1.Dispatcher.Invoke(
                    new Action(
                        delegate
                        {
                            TextBox1.AppendText("\r\n" + "请手动长按power键10秒重启！");
                            TextBox1.AppendText("\r\n" + "请手动长按power键10秒重启！");
                            TextBox1.AppendText("\r\n" + "请手动长按power键10秒重启！");
                        }
                    )
                );
                result = Execute("adb wait-for-device", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb wait-for-device 发现设备");
                result = Execute("adb root", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb root");
                result = Execute("adb disable-verity", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb disable-verity");
                result = Execute("adb reboot", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb reboot");
                result = Execute("adb wait-for-device", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb wait-for-device 发现设备");
                result = Execute("adb root", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb root");
                result = Execute("adb remount", 0);
                sum += 10;
                backgroundWorker.ReportProgress(sum, "adb remount");
            };

            // When the worker is finished, tidy up.
            this.backgroundWorker.RunWorkerCompleted += (s, pe) =>
            {
                TextBox1.AppendText("\r\n"+"完成解锁");
                MessageBox.Show("完成");
            };
            this.backgroundWorker.RunWorkerAsync(new Tuple<int, int, int>(100, 500, 100));
        }
```

### 2.wpf 调用线程无法访问此对象,因为另一个线程拥有该对象

* 参考：
* [Wpf 调用线程无法访问此对象，因为另一个线程拥有该对象，解决方案](https://www.cnblogs.com/tianma3798/p/5762016.html)

出现上面的异常是因为多个线程在同时访问一个对象造成的，解决方案：使用Dispatcher.BeginInvoke+委托方式，修改UI。

```C#
历程：
//线程方法，修改Button内容
private void UpdateBtn()
{
    int i = 0;
    while (true)
    {
        i++;
        Action action1 = () =>
        {
            button.Content = i;
        };
        button.Dispatcher.BeginInvoke(action1);
        // 如果不设置等待，整个程序死循环
        Thread.Sleep(500);
    }
}

实例：
      void led_status_threadfunc()
        {
            p.StartInfo.Arguments = "/c adb devices";

            while (true)
            {
                Action action_offline = () =>
                {
                    led.Fill = new SolidColorBrush(Colors.Red);
                    led.Stroke = new SolidColorBrush(Colors.Red);
                };
                Action action_online = () =>
                {
                    led.Fill = new SolidColorBrush(Colors.Green);
                    led.Stroke = new SolidColorBrush(Colors.Green);
                };
               
                p.Start();
                string outtr = p.StandardOutput.ReadToEnd();
                p.Close();
                outtr = outtr.Replace("List of devices attached", "");
                outtr = outtr.Replace("device", "");
                outtr = outtr.Replace("\r", "");
                outtr = outtr.Replace("\n", "");
                if (outtr.Length == 0)
                {
                    led.Dispatcher.BeginInvoke(action_offline);
                    adb_status = false;
                    //MessageBox.Show("请连接adb设备");
                }
                else
                {      

                    led.Dispatcher.BeginInvoke(action_online);
                    adb_status = true;
                    //MessageBox.Show("找到adb设备：" + outtr);
                }
            }
            Thread.Sleep(1000);
        }
```

或者：

```C#
https://blog.csdn.net/cselmu9/article/details/8274556?locationNum=12&fps=1
TextBox1.Dispatcher.Invoke(
    new Action(
        delegate
        {
            TextBox1.AppendText("\r\n" + "设备解锁");
        }
    )
);
```

### 3.线程创建
* 参考

* [WPF调用线程](https://www.cnblogs.com/yangyancheng/archive/2011/04/03/2004404.html)

```C#

namespace WpfThreadTest
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        Thread countThread;
       
        public MainWindow()
        {
            InitializeComponent();
            this.textBox1.Text = DateTime.Now.ToLocalTime().ToString("yyyy年MM月dd日 hh:mm:ss"); ;
            countThread = new Thread(new ThreadStart(DispatcherThread));
        }
        private void button3_Click(object sender, RoutedEventArgs e)
        {
            if (button3.Content.ToString() == "开始时间线程")
            {
                button3.Content = "停止时间线程";
                if (countThread.ThreadState == ThreadState.Suspended)
                {
                    //线程继续
                    countThread.Resume();
                }
                else
                    countThread.Start();
            }
            else
            {
                button3.Content = "开始时间线程";  
                //线程挂起
                countThread.Suspend();
                
            }
        }
        public void DispatcherThread()
        {
            //可以通过循环条件来控制UI的更新
            while (true)
            {
                ///线程优先级，最长超时时间，方法委托（无参方法）
                textBox1.Dispatcher.Invoke(
                    DispatcherPriority.Normal, TimeSpan.FromSeconds(1), new Action(UpdateTime));
                Thread.Sleep(1000);                
            }
        }

        
        private void UpdateTime()
        {
            this.textBox1.Text = DateTime.Now.ToLocalTime().ToString("yyyy年MM月dd日 hh:mm:ss");      
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            countThread.Abort();
            Application.Current.Shutdown();
        }
    }
}
```

### 4.文件遍历

* [C#遍历指定文件夹中的所有文件](https://www.cnblogs.com/skylaugh/archive/2012/09/23/2698850.html)

```C#
遍历文件夹：
	DirectoryInfo folder = new DirectoryInfo(Path);

	foreach (DirectoryInfo NextFolder in folder.GetDirectories("APLog*"))
	{
		Console.WriteLine(NextFolder.FullName);
		TextBox1.Text = NextFolder.FullName;
	}

遍历文件：
//遍历文件
foreach(FileInfo NextFile in TheFolder.GetFiles())
   this.listBox2.Items.Add(NextFile.Name);

对某个文件夹的某个文件名进行操作：
	foreach (DirectoryInfo NextFolder in folder.GetDirectories("APLog*"))
	{
		Console.WriteLine(NextFolder.FullName);
		TextBox1.Text = NextFolder.FullName;
		//new_folder = NextFolder;
		foreach (FileInfo NextFile in NextFolder.GetFiles("kernel_log*"))
		{
			ProcessInfo.Arguments = Environment.CurrentDirectory + "\\tools\\kernel_to_utc.py " + NextFile.FullName;
			TextBox1.Text = Environment.CurrentDirectory + "\\tools\\kernel_to_utc.py " + NextFile.FullName;
			Process = Process.Start(ProcessInfo);
			Process.WaitForExit();
			ExitCode = Process.ExitCode;
			Process.Close();
		}
	}

搜索某个文件夹下所有包含带有xx字符串的文件并操作：
/// <summary>
/// 获得指定路径下所有文件名
/// </summary>
/// <param name="sw">文件写入流</param>
/// <param name="path">文件写入流</param>
/// <param name="word">文件名过滤</param>
public void getFileFilter(string path, string word, List<FileInfo> lst)
{
	DirectoryInfo root = new DirectoryInfo(path);
	foreach (FileInfo f in root.GetFiles(word + "*"))
	{
		lst.Add(f);
	}
}

/// <summary>
/// 获得指定路径下所有子目录名
/// </summary>
/// <param name="path">文件夹路径</param>
/// <param name="word">文件名过滤</param>
public  List<FileInfo> getDirectoryFilter( string path, string word, List<FileInfo> lst)
{
	if (!Directory.Exists(path))
	{
		return lst;
	}
	getFileFilter( path, word, lst);
	DirectoryInfo root = new DirectoryInfo(path);
	foreach (DirectoryInfo d in root.GetDirectories())
	{
		getDirectoryFilter(d.FullName, word, lst);
	}
	return lst;
}

List<FileInfo> lstFiles = getDirectoryFilter(Log_Path, "kernel_log", lst); //过滤函数
foreach (FileInfo shpFile in lst)
{
   ...//执行操作
}

过滤路径下指定格式的文件
private void GetTypefile(string path, string filetype, List<FileInfo> lst)
{
    DirectoryInfo theFolder = new DirectoryInfo(path);  // 给出你的目录文件位置 
    FileInfo[] fileInfo = theFolder.GetFiles(); // 获得当前的文件夹内的所有文件数组

    foreach (FileInfo NextFile in fileInfo)   //遍历文件
    { 
        if (NextFile.Extension == "." + filetype)  // 得到你想要的格式
        {
            lst.Add(NextFile); 
        }
    }
}
```

### 5.C# 文件操作

#### 1.清除文件

```C#
        public void Clear_Files(string path)
        {
            if (Directory.Exists(path))
            {
                //获取该路径下的文件路径
                string[] filePathList = Directory.GetFiles(path);
                foreach (string filePath in filePathList)
                {
                    File.Delete(filePath);
                }
            }
        }
 
        public void Clear_Directors(string path)
        {
            if (Directory.Exists(path))
            {
                //获取该路径下的文件夹路径
                string[] directorsList = Directory.GetDirectories(path);
                foreach(string directory in directorsList)
                {
                    Directory.Delete(directory,true);//删除该文件夹及该文件夹下包含的文件
                }
            }
        }
 
————————————————
版权声明：本文为CSDN博主「Daniel799」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u012664198/article/details/90412661
```

#### 6.修改文件名，并增加时间戳后缀

```C#
修改文件：
string srcFileName = @"c:\order.txt";
string destFileName = @"c:\abcd.txt";
if (File.Exists(srcFileName))
{
	File.Move(srcFileName, destFileName);
}

修改文件夹：
if (Directory.Exists(Log_Path + "\\debuglogger"))
{
	Directory.Move(Log_Path + "\\debuglogger", Log_Path + "\\debuglogger" + DateTime.Now.ToString("yyyyMMddHHmm"));//将后缀加入时间戳
}
```


### 6.执行python/adb脚本

```C#
python:
          ProcessStartInfo ProcessInfo;
            Process Process;
            int ExitCode;

            ProcessInfo = new ProcessStartInfo();
            ProcessInfo.FileName = "python2.exe";
       
            ProcessInfo.CreateNoWindow = true;
            ProcessInfo.UseShellExecute = false;
            ProcessInfo.RedirectStandardOutput = true;
			ProcessInfo.Arguments = Environment.CurrentDirectory + "\\tools\\kernel_to_utc.py " + NextFile.FullName;
			TextBox1.Text = Environment.CurrentDirectory + "\\tools\\kernel_to_utc.py " + NextFile.FullName;
			Process = Process.Start(ProcessInfo);
			Process.WaitForExit();
			ExitCode = Process.ExitCode;
			Process.Close();

adb:
            Process p = new Process();
            p.StartInfo.FileName = "cmd.exe";
            p.StartInfo.UseShellExecute = false;//是否使用操作系统shell启动
            p.StartInfo.RedirectStandardInput = true;//接受来自调用程序的输入信息
            p.StartInfo.RedirectStandardOutput = true;//由调用程序获取输出信息
            p.StartInfo.RedirectStandardError = true;//重定向标准错误输出
           // p.StartInfo.CreateNoWindow = false;//不显示程序窗口
            p.StartInfo.CreateNoWindow = true;          //设置不显示窗口  
            p.Start();//启动程序
            p.StandardInput.WriteLine("adb root");//目录装到C盘
            p.StandardInput.WriteLine("exit");//结束标志
            output = p.StandardOutput.ReadToEnd();//获取cmd窗口的输出信息，即便并无获取的需要也需要写这句话，不然程序会假死
            TextBox1.Text = output;
            p.WaitForExit();//等待程序执行完
            p.Close();//退出进程

输入多条命令：
https://blog.csdn.net/niuba123456/article/details/90509850?spm=1035.2023.3001.6557&utm_medium=distribute.pc_relevant_bbs_down_v2.none-task-blog-2~default~OPENSEARCH~Rate-2.pc_relevant_bbs_down_v2_default&depth_1-utm_source=distribute.pc_relevant_bbs_down_v2.none-task-blog-2~default~OPENSEARCH~Rate-2.pc_relevant_bbs_down_v2_default

cmd执行命令函数：

    public void RunCMDCommand(out string outPut, params string[] command)
        {
            using (Process pc = new Process())
            {
                pc.StartInfo.FileName = "cmd.exe";
                pc.StartInfo.CreateNoWindow = true;//隐藏窗口运行
                pc.StartInfo.RedirectStandardError = true;//重定向错误流
                pc.StartInfo.RedirectStandardInput = true;//重定向输入流
                pc.StartInfo.RedirectStandardOutput = true;//重定向输出流
                pc.StartInfo.UseShellExecute = false;
                pc.Start();
                int lenght = command.Length;
                foreach (string com in command)
                {
                    pc.StandardInput.WriteLine(com);//输入CMD命令
                }
               pc.StandardInput.WriteLine("exit");//结束执行，很重要的
               pc.StandardInput.AutoFlush = true;
 
                outPut = pc.StandardOutput.ReadToEnd();//读取结果        
 
                pc.WaitForExit();
                pc.Close();
            }
        }
1. 设置可变参数：必须在实参的最后一个；

2.循环执行dos命令

3. 必须 exit进行退出，不然会一直停留在dos，没法返回信息；

C#调用

            string resultStr = "";     
            daMoTools.RunCMDCommand(out resultStr,"mkdir D:\\123", "ipconfig");
 
            Console.WriteLine(resultStr);、

在C#中执行dos命令并返回结果字符串：
原文链接：https://blog.csdn.net/sundacheng1989/article/details/16114339

public string Execute(string dosCommand, int milliseconds)
        {
            string output = "";     //输出字符串
            if (dosCommand != null && dosCommand != "")
            {
                Process process = new Process();     //创建进程对象
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";      //设定需要执行的命令
                startInfo.Arguments = "/C " + dosCommand;   //设定参数，其中的“/C”表示执行完命令后马上退出
                startInfo.UseShellExecute = false;     //不使用系统外壳程序启动
                startInfo.RedirectStandardInput = false;   //不重定向输入
                startInfo.RedirectStandardOutput = true;   //重定向输出
                startInfo.CreateNoWindow = true;     //不创建窗口
                process.StartInfo = startInfo;
                try
                {
                    if (process.Start())       //开始进程
                    {
                        if (milliseconds == 0)
                            process.WaitForExit();     //这里无限等待进程结束
                        else
                            process.WaitForExit(milliseconds);  //当超过这个毫秒后，不管执行结果如何，都不再执行这个DOS命令
                        output = process.StandardOutput.ReadToEnd();//读取进程的输出
                    }
                }
                catch
                {
                }
                finally
                {
                    if (process != null)
                        process.Close();
                }
            }
            return output;
        }
 
string result = Execute("subst", 1000);
```
* cmd实时回显：
```C#
    public class CmdUtils
    {
        public String shell = "";
        public void sendCmd(MainWindow cmdoom)
        {
            Process cmd = null;
            if (cmd == null)
            {
                cmd = new Process();//创建进程对象  
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";//设定需要执行的命令  
                startInfo.Arguments = "";//“/C”表示执行完命令后马上退出  
                startInfo.UseShellExecute = false;//不使用系统外壳程序启动  
                startInfo.RedirectStandardInput = true;//不重定向输入  
                startInfo.RedirectStandardOutput = true; //重定向输出  
                startInfo.CreateNoWindow = true;//不创建窗口  
                cmd.StartInfo = startInfo;
                // cmd.Start();
            }
            if (cmd.Start())//开始进程  
            {
                cmd.StandardOutput.ReadLine().Trim();
                cmd.StandardOutput.ReadLine().Trim();
                while (cmdoom.isRun.IndexOf("start") != -1)
                {
                    if (shell.Length > 0)
                    {
                        cmd.StandardInput.WriteLine(shell);
                        cmd.StandardOutput.ReadLine().Trim();

                        cmd.StandardInput.WriteLine("\n");
                        String log = cmd.StandardOutput.ReadLine().Trim();
                        String path = log.Substring(0, 2).ToUpper();
                        updateLog(cmdoom, log);
                        log = "";
                        do
                        {

                            String logm = cmd.StandardOutput.ReadLine().Trim();
                            if (logm.IndexOf(path) != -1)
                            {

                                break;
                            }
                            updateLog(cmdoom, logm + "\n");
                            log += logm;

                        } while (true);

                        shell = "";
                    }
                }

                cmd.Close();

                cmd = null;
                return;
            }
            return;
        }
        private delegate void UpdateLog();

        private void updateLog(MainWindow cmd, String log)
        {
            UpdateLog set = delegate ()
            {
                cmd.TextBox1.AppendText("\n" + log);
            };
            cmd.TextBox1.Dispatcher.BeginInvoke(set);
        }
    }


    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        public String isRun = "start";
        CmdUtils cmd = new CmdUtils(); 
    
    public MainWindow()
        {
            InitializeComponent();
            new Thread(new ThreadStart(init)).Start();
        }

        private void init()
        {
            cmd.sendCmd(this);
        }
    }

    private void Button_Click_Scp_Log(object sender, RoutedEventArgs e)
    {
        try
        {
            cmd.shell = "adb shell" + " " + "\"" + "while true; do cat /dev/scp;done" + "\"";
        }
        catch
        {
            MessageBox.Show("请连接手机adb");
        }
    }
```


### 7.控件使用技巧

#### 1.换行显示

```C#
第一种累加方式：
TextBox1.Text =  TextBox1.Text + "\r\n"+ GpioArrayStr[i];

第二种累加方式：
 TextBox1.Text = "正在从手机中截屏...";
  TextBox1.Text += "\r\n" + "截屏成功！保存路径：" ;

第三种AppendText：
TextBox1.AppendText( "\r\n" + shpFile.FullName);

TextBox自动滚动:
private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
{
    TextBox1.SelectionStart = TextBox1.Text.Length; //Set the current caret position at the end
    TextBox1.Focus(); //让TextBox一直获取焦点
}

C#winform三种方法判断文本框textBox内容是否为空
使用系统API函数，需要使用命名空间：System.Runtime.InteropServices；

1.if (textBoxPath.Text ==  String.Empty )

2.if (textBoxPath.Text == "" )

3.if (String.IsNullOrEmpty(textBoxPath.Text))
————————————————
版权声明：本文为CSDN博主「摸鱼农」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_59565974/article/details/118892747
```

#### 2.保存TextBox文本为txt

* [参考](https://www.freesion.com/article/8742596152/)

```C#
/// <summary>
/// 写文件
/// </summary>
/// <param name="Path">文件路径</param>
/// <param name="Strings">文件内容</param>
public static void WriteFile(string Path, string Strings)
{
    if (!System.IO.File.Exists(Path))
    {
        //Directory.CreateDirectory(Path);
        System.IO.FileStream f = System.IO.File.Create(Path);
        f.Close();
        f.Dispose();
    }
    System.IO.StreamWriter f2 = new System.IO.StreamWriter(Path, true, System.Text.Encoding.UTF8);
    f2.WriteLine(Strings);
    f2.Close();
    f2.Dispose();
}

private void Button_Click(object sender, RoutedEventArgs e)
{
    string log = Log_Path + "\\" + "log" + DateTime.Now.ToString("yyyyMMddHHmm") + ".txt";
    if (TextBox1.Text != "")
    {
        WriteFile(log, TextBox1.Text);
        TextBox1.AppendText("\r\n" + "log保存成功！路径如下：");
        TextBox1.AppendText("\r\n" + log);
    }
}
```

#### 3.如何弹出确认提示框

参考：
* [C#wpf中的确认框](https://qa.1r1g.com/sf/ask/1282105051/)

```C#
MessageBoxResult messageBoxResult = System.Windows.MessageBox.Show("Are you sure?", "Delete Confirmation", System.Windows.MessageBoxButton.YesNo);
if (messageBoxResult == MessageBoxResult.Yes)
{
    Clear_Directory(Log_Path);
    TextBox1.Text = "MTK log文件删除成功！" + "\r\n" + Environment.CurrentDirectory + "\\log\\debuglogger";
}
```