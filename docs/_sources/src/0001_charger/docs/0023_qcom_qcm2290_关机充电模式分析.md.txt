# 概述

高通qcm2290代码拿过来，关机插入usb直接开机，应该进入关机充电。 

# 参考

* [高通uefi的abl增加新的kernel cmdlin标签经验分享](https://blog.csdn.net/qq_27629673/article/details/125471481)

# 软件分析

移远那边给过来修改如下可以进入：
```diff
 UM.9.15/bootable/bootloader/edk2/QcomModulePkg/Library/BootLib/UpdateCmdLine.c 
@@ -673,7 +673,9 @@ UpdateCmdLine (CONST CHAR8 *CmdLine,
     /* reduce kernel console messages to speed-up boot */
     CmdLineLen += AsciiStrLen (LogLevel);
   } else if (BatteryStatus &&
              IsChargingScreenEnable () &&
+//[feature]-del-begin xielianxiong@paxsz.com 20220830,for shutdown boot into charging mode
+             /*IsChargingScreenEnable () &&*/
+ //[feature]-del-end xielianxiong@paxsz.com 20220830,for shutdown boot into charging mode
              !Recovery) {
     DEBUG ((EFI_D_INFO, "Device will boot into off mode charging mode\n"));
     PauseAtBootUp = 1;
```

# 实现原理

* 以上可得知关机充电原理就是向上传一个`androidboot.mode=charger` kernel cmdline，healthd进程接收进入关机充电模式，最终判断的是`IsChargingScreenEnable`接口和`BatteryStatus`状态，下面dtb写了暂时不分析。
```C++
* LinuxLoaderEntry (IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE *SystemTable) //ABL入口函数
  * BootLinux (&Info);
    * Status = DTBImgCheckAndAppendDT (Info, &BootParamlistPtr);
	  * BoardDtb = GetBoardDtb (Info, BootParamlistPtr->DtboImgBuffer);
	    * FindBestDtb = ReadDtbFindMatch (&CurDtbInfo, &BestDtbInfo, BIT(VARIANT_MATCH) | BIT(PAX_BOARD_INFO_MATCH)); //重要，读取sp信息
	    * if (FindBestDtb) DtboIdx = DtboCount;
    * Status = UpdateCmdLine (BootParamlistPtr.CmdLine, FfbmStr, Recovery,
	  * DtboIdx = GetDtboIdx ();
	  * if (BatteryStatus && IsChargingScreenEnable () && !Recovery)
	    * CmdLineLen += AsciiStrLen (BatteryChgPause);  
		* else CmdLineLen += AsciiStrLen (AlarmBootCmdLine);
```

* cmdline定义如下：
```C++
STATIC CONST CHAR8 *BatteryChgPause = " androidboot.mode=charger";
STATIC CONST CHAR8 *AlarmBootCmdLine = " androidboot.alarmboot=true";

STATIC CHAR8 *AndroidBootDtboIdx = " androidboot.dtbo_idx=";
STATIC CHAR8 *AndroidBootDtbIdx = " androidboot.dtb_idx=";
```

# IsChargingScreenEnable原理

* `QcomModulePkg/Library/BootLib/DeviceInfo.c`中abl会在初始化中调用`DeviceInfoInit`接口获取devinfo：
```C++
EFI_STATUS DeviceInfoInit (VOID)
{
  EFI_STATUS Status = EFI_SUCCESS;

  if (FirstReadDevInfo) {
    Status =
        ReadWriteDeviceInfo (READ_CONFIG, (VOID *)&DevInfo, sizeof (DevInfo));
    if (Status != EFI_SUCCESS) {
      DEBUG ((EFI_D_ERROR, "Unable to Read Device Info: %r\n", Status));
      return Status;
    }

    FirstReadDevInfo = FALSE;
  }

  if (CompareMem (DevInfo.magic, DEVICE_MAGIC, DEVICE_MAGIC_SIZE)) {
    DEBUG ((EFI_D_ERROR, "Device Magic does not match\n"));
    gBS->SetMem (&DevInfo, sizeof (DevInfo), 0);
    gBS->CopyMem (DevInfo.magic, DEVICE_MAGIC, DEVICE_MAGIC_SIZE);
    DevInfo.user_public_key_length = 0;
    gBS->SetMem (DevInfo.rollback_index, sizeof (DevInfo.rollback_index), 0);
    gBS->SetMem (DevInfo.user_public_key, sizeof (DevInfo.user_public_key), 0);
    if (IsSecureBootEnabled ()) {
      DevInfo.is_unlocked = FALSE;
      DevInfo.is_unlock_critical = FALSE;
    } else {
      DevInfo.is_unlocked = TRUE;
      DevInfo.is_unlock_critical = TRUE;
    }
    DevInfo.is_charger_screen_enabled = FALSE; //初始化为不开，可以通过改这里实现进入关机充电
    DevInfo.verity_mode = TRUE;
    Status =
        ReadWriteDeviceInfo (WRITE_CONFIG, (VOID *)&DevInfo, sizeof (DevInfo));
    if (Status != EFI_SUCCESS) {
      DEBUG ((EFI_D_ERROR, "Unable to Write Device Info: %r\n", Status));
      return Status;
    }
  }

  return Status;
}

BOOLEAN IsChargingScreenEnable (VOID)
{
  return DevInfo.is_charger_screen_enabled;
}

EFI_STATUS
EnableChargingScreen (BOOLEAN IsEnabled) //提供fastboot命令调用
{
  EFI_STATUS Status = EFI_SUCCESS;

  if (IsChargingScreenEnable () != IsEnabled) {
    DevInfo.is_charger_screen_enabled = IsEnabled;
    Status = ReadWriteDeviceInfo (WRITE_CONFIG, &DevInfo, sizeof (DevInfo));
    if (Status != EFI_SUCCESS) {
      DEBUG ((EFI_D_ERROR, "Error %a charger screen: %r\n",
              (IsEnabled ? "Enabling" : "Disabling"), Status));
      return Status;
    }
  }

  return Status;
}
```

# BatteryStatus原理

* `BatteryStatus`是通过接口`TargetPauseForBatteryCharge`获取状态的，首先通过接口`GetPonReason`获取启动原因，然后根据接口`WarmResetStatus`判断是冷启还是热启，最后根据接口`GetChargerPresence`判断是否是usb充电启动，根据注释可以了解到：
  * 在`fastboot reboot`重启的情况下，`adb reboot`或者如果电源键被按下，我们不想进入关机充电模式。
  * 两个必要条件：冷启动和非`fastboot/adb reboot`启动必须满足，在此基础上usb充电、charger在充、`PON1 trigger`则进入关机充电模式。

## PON_REASON_TYPE启动原因

```C++
启动原因：
QcomModulePkg/Include/Protocol/EFIPmicPon.h
typedef struct {
  UINT32 HARD_RESET : 1; /* Hard reset event trigger */
  UINT32 SMPL : 1;       /* SMPL trigger */
  UINT32 RTC : 1;        /* RTC trigger */
  UINT32 DC_CHG : 1;     /* DC Charger trigger */
  UINT32 USB_CHG : 1;    /* USB Charger trigger */
  UINT32 PON1 : 1;       /* PON1 trigger */
  UINT32 CBLPWR : 1;     /* CBL_PWR1_N trigger */
  UINT32 KPDPWR : 1;     /* KPDPWR_N trigger */
} EFI_PM_PON_REASON_TYPE;


TargetPauseForBatteryCharge (BOOLEAN *BatteryStatus)
{
  EFI_STATUS Status = EFI_SUCCESS;
  EFI_PM_PON_REASON_TYPE PONReason;
  EFI_QCOM_PMIC_PON_PROTOCOL *PmicPonProtocol;
  EFI_CHARGER_EX_PROTOCOL *ChgDetectProtocol;
  BOOLEAN ChgPresent;
  BOOLEAN WarmRtStatus;
  BOOLEAN IsColdBoot;

  /* Determines whether to pause for batter charge,
   * Serves only performance purposes, defaults to return zero*/
  *BatteryStatus = 0;

  Status = gBS->LocateProtocol (&gChargerExProtocolGuid, NULL,
                                (VOID **)&ChgDetectProtocol);
  if (Status == EFI_NOT_FOUND) {
    DEBUG ((EFI_D_VERBOSE, "Charger Protocol is not available.\n"));
    return EFI_SUCCESS;
  } else if (EFI_ERROR (Status)) {
    DEBUG ((EFI_D_ERROR, "Error finding charger protocol: %r\n", Status));
    return Status;
  }

  /* The new protocol are supported on future chipsets */
  if (ChgDetectProtocol->Revision >= CHARGER_EX_REVISION) {
    Status = ChgDetectProtocol->IsOffModeCharging (BatteryStatus);
    if (EFI_ERROR (Status))
      DEBUG (
          (EFI_D_ERROR, "Error getting off mode charging info: %r\n", Status));

    return Status;
  } else {
    Status = gBS->LocateProtocol (&gQcomPmicPonProtocolGuid, NULL,
                                  (VOID **)&PmicPonProtocol);
    if (EFI_ERROR (Status)) {
      DEBUG ((EFI_D_ERROR, "Error locating pmic pon protocol: %r\n", Status));
      return Status;
    }

    /* Passing 0 for PMIC device Index since the protocol infers internally */
    Status = PmicPonProtocol->GetPonReason (0, &PONReason);
    if (EFI_ERROR (Status)) {
      DEBUG ((EFI_D_ERROR, "Error getting pon reason: %r\n", Status));
      return Status;
    }

    Status = PmicPonProtocol->WarmResetStatus (0, &WarmRtStatus);
    if (EFI_ERROR (Status)) {
      DEBUG ((EFI_D_ERROR, "Error getting warm reset status: %r\n", Status));
      return Status;
    }

    IsColdBoot = !WarmRtStatus;
    Status = ChgDetectProtocol->GetChargerPresence (&ChgPresent);
    if (EFI_ERROR (Status)) {
      DEBUG ((EFI_D_ERROR, "Error getting charger info: %r\n", Status));
      return Status;

    DEBUG ((EFI_D_INFO, " PON Reason is %d cold_boot:%d charger path: %d\n",
            PONReason, IsColdBoot, ChgPresent));
    /* In case of fastboot reboot,adb reboot or if we see the power key
     * pressed we do not want go into charger mode.
     * fastboot/adb reboot is warm boot with PON hard reset bit set.
     */
    if (IsColdBoot && (!(PONReason.HARD_RESET) && (!(PONReason.KPDPWR)) &&
                       (PONReason.PON1 || PONReason.USB_CHG) && (ChgPresent))) {
      *BatteryStatus = 1;
    } else {
      *BatteryStatus = 0;
    }

    return Status;
  }
}
```

首先来看一下`GetPonReason`和`WarmResetStatus`接口实现，他们都是基于同一个`PmicPonProtocol`，这里看看Pmic中接口实现在XBL中：
* `QcomPkg/Drivers/PmicDxe/Pmic.c`:
```C++
* PmicInitialize(
  * err_flag = pm_init();
    * pm_device_setup(); //QcomPkg/Library/PmicLib/framework/src/pm_core_init.c
    * pm_comm_info_init();
    * pm_resource_manager_init();
  * err_flag = pm_pmicdxe_init(ImageHandle, SystemTable);
    * Status |= pm_install_common_protocols(ImageHandle, SystemTable); //这里初始化所有常用的protocols
    * Status |= pm_install_target_protocols(ImageHandle, SystemTable);
```

接着查看一下具体内容，其中`PmicPwronProtocolImplementation`是我们找的protocol：
```C++
static pm_err_flag_type pm_install_common_protocols(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)
{
  EFI_STATUS Status         = EFI_SUCCESS;
  pm_err_flag_type err_flag = PM_ERR_FLAG_SUCCESS;

  Status  = gBS->InstallMultipleProtocolInterfaces(
    &ImageHandle,
    &gQcomPmicGpioProtocolGuid,    &PmicGpioProtocolImplementation,
    &gQcomPmicVregProtocolGuid,    &PmicVregProtocolImplementation,
    &gQcomPmicLpgProtocolGuid,     &PmicLpgProtocolImplementation,
    &gQcomPmicClkBuffProtocolGuid, &PmicClkBuffProtocolImplementation,
    &gQcomPmicRtcProtocolGuid,     &PmicRtcProtocolImplementation,
    &gQcomPmicPwrOnProtocolGuid,   &PmicPwronProtocolImplementation,
    &gQcomPmicVersionProtocolGuid, &PmicVersionProtocolImplementation,
    &gQcomPmicWledProtocolGuid,    &PmicWledProtocolImplementation,
    &gQcomPmicIbbProtocolGuid,     &PmicIbbProtocolImplementation,
    &gQcomPmicAbProtocolGuid,      &PmicAbProtocolImplementation,
    &gQcomPmicOledbProtocolGuid,   &PmicOledbProtocolImplementation,
    &gQcomPmicRgbLedProtocolGuid,  &PmicRgbLedProtocolImplementation,
    &gQcomPmicUsbProtocolGuid,     &PmicUsbProtocolImplementation,
    &gQcomPmicVibProtocolGuid,     &PmicVibProtocolImplementation,
    &gQcomPmicGenericProtocolGuid, &PmicGenericProtocolImplementation,
    &gQcomPmicLcdbProtocolGuid,    &PmicLcdbProtocolImplementation,
    &gQcomPmicPwmProtocolGuid,     &PmicPwmProtocolImplementation,
    &gQcomPmicDriverTestProtocolGuid, &PmicTestProtocolImplementation,
    NULL
    );

  err_flag = (Status == EFI_SUCCESS) ? PM_ERR_FLAG_SUCCESS : PM_ERR_FLAG_FAILURE;

  return err_flag;
}

// EXTERNAL FUNCTION PROTOTYPES
pm_err_flag_type pm_install_target_protocols(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)
{

  pm_err_flag_type err_flag = PM_ERR_FLAG_SUCCESS;
  EFI_STATUS  Status = EFI_SUCCESS;

  Status = gBS->InstallMultipleProtocolInterfaces(
    &ImageHandle,
    &gQcomPmicPonProtocolGuid,  &PmicPonProtocolImplementation,       /*installing gQcomPmicPonProtocolGuid for open source*/
    &gQcomPmicSchgProtocolGuid, &PmicScpqProtocolImplementation,
    &gQcomPmicQgProtocolGuid,   &PmicQgProtocolImplementation,
    NULL
    );

  err_flag = (Status == EFI_SUCCESS) ? PM_ERR_FLAG_SUCCESS : PM_ERR_FLAG_FAILURE;

  return err_flag;
}
```

* `QcomPkg/Drivers/PmicDxe/PmicPwrOnProtocol.c`:`PmicPwronProtocolImplementation`接口定义如下：
```C++
EFI_QCOM_PMIC_PWRON_PROTOCOL PmicPwronProtocolImplementation =
{
  PMIC_PWRON_REVISION,
  EFI_PmicPwronGetPonPblStatus,
  EFI_PmicPwronSetPonTrigger,
  EFI_PmicPwronGetPonRtStatus,
  EFI_PmicPonGetSpareReg,
  EFI_PmicPonSetSpareReg,
  EFI_PmicPonGetPonReason,
  EFI_PmicPonWarmResetStatus,
  EFI_PmicPonGetAllPonReasons,
  EFI_PmicPwronEnableEdgePonTrigger,
  EFI_PmicPonGetAllFaultReasons,
};
```

* 我们找的接口如下，其中`EFI_PmicPonGetPonReason`接口是通过读取`PMIO_PON_GEN2_PON_REASON1_ADDR`寄存器获取启动原因：
```C++
EFI_STATUS
EFIAPI
EFI_PmicPonGetPonReason
(
   IN  UINT32                  PmicDeviceIndex,
   OUT EFI_PM_PON_REASON_TYPE* PonReason
)
{
  EFI_STATUS Status = EFI_SUCCESS;

  pm_err_flag_type  err_flag = PM_ERR_FLAG__SUCCESS;

  if(NULL == PonReason)
  {
    Status = EFI_INVALID_PARAMETER;
  }
  else
  {
    err_flag = pm_pon_get_pon_reason(PmicDeviceIndex, (pm_pon_reason_type*) PonReason);

    Status = (PM_ERR_FLAG__SUCCESS == err_flag)? EFI_SUCCESS : EFI_DEVICE_ERROR;
  }

  return Status;
}

#define PON_BASE                                                          0x00000800
#define PMIO_PON_GEN2_PON_REASON1_ADDR                                        (PON_BASE      + 0x000000C0)
pm_err_flag_type
pm_pon_get_pon_reason(uint32 pmic_device_index, pm_pon_reason_type *reason)
{
  pm_err_flag_type err_flag = PM_ERR_FLAG_SUCCESS;
  uint32 slave_id = 0;

  if (reason == NULL)
  {
    err_flag = PM_ERR_FLAG_INVALID_PARAMETER;
  }
  else
  {
    err_flag = pm_pon_get_pon_info(pmic_device_index, &slave_id);
    if (err_flag == PM_ERR_FLAG_SUCCESS)
    {
      err_flag = pm_comm_read_byte(slave_id, PMIO_PON_GEN2_PON_REASON1_ADDR, (uint8 *)reason, 0);
          if( (pm_get_pmic_model(PMIC_A) == PMIC_IS_PM6125) && reason->pon1 == 0x1)
          {
                  reason->rtc = 0x1;
                  reason->pon1 = 0x0;
          }
    }
  }

  return err_flag;
}
```

* `cPonWarmResetStatus`接口如下，也是通过`pm_pon_get_on_reason`获取，如果能获取到启动原因则是热启动：
```C++
EFI_STATUS
EFIAPI
EFI_PmicPonWarmResetStatus
(
   IN  UINT32      PmicDeviceIndex,
   OUT BOOLEAN*    WarmReset
  )
{
  EFI_STATUS Status = EFI_SUCCESS;

  pm_err_flag_type  err_flag = PM_ERR_FLAG__SUCCESS;
  pm_pon_on_state_reason_type Reason;

  if(NULL == WarmReset)
  {
    Status = EFI_DEVICE_ERROR;
  }
  else
  {
    err_flag =  pm_pon_get_on_reason(PmicDeviceIndex, &Reason);

    if(err_flag == PM_ERR_FLAG__SUCCESS)
    {
      *WarmReset = (Reason.warm_seq == TRUE) ? TRUE : FALSE;
    }

    Status = (PM_ERR_FLAG__SUCCESS == err_flag)? EFI_SUCCESS : EFI_DEVICE_ERROR;
  }

  return Status;
}
```


* `QcomPkg/Library/ChargerLib/target/Agatti/ChargerLibTarget.c`代码流程：
```C++
* EFI_STATUS ChargerLibTarget_Init( chargerlib_cfgdata_type *pChargerLibTargetConfig )
  * ChargerLibTarget_HWInit(pChargerLibTargetConfig);
```

## GetChargerPresence是否充电判断

* `GetChargerPresence`定义如下，根据接口`GetVbusDetectStatus`获取vbus状态，来判断是否在充电：
```C++
/**
EFI_ChargerExGetChargerPresence()

@brief
 Returns charger presence status
 */
EFI_STATUS
EFIAPI
EFI_ChargerExGetChargerPresence
(
  OUT BOOLEAN  *pChargerPresent
)
{
  EFI_STATUS                           Status = EFI_SUCCESS;
  STATIC EFI_USB_PWR_CTRL_PROTOCOL   *UsbPwrCtrlProtocol   = NULL;
  //BOOLEAN                              DcInValid = FALSE;
  EFI_PLATFORMINFO_PLATFORM_TYPE       PlatformType;

  if(FALSE == IsChgPresent)
  {
        return EFI_UNSUPPORTED;
  }

  if (!pChargerPresent)
  {
    return EFI_INVALID_PARAMETER;
  }

  Status |= GetPlatformType(&PlatformType);
  if(EFI_SUCCESS != Status)
  {
    DEBUG((EFI_D_WARN, "ChargerExProtocol:: %a Error getting platform type  \r\n", __FUNCTION__));
    return EFI_DEVICE_ERROR;
  }

  if((EFI_PLATFORMINFO_TYPE_CDP == PlatformType) || (EFI_PLATFORMINFO_TYPE_RUMI == PlatformType)
    || (EFI_PLATFORMINFO_TYPE_CLS == PlatformType))
  {
    DEBUG(( EFI_D_WARN, "ChargerExProtocol:: %a CDP/RUMI/CLS/IDP (%d) Platform detected. No Battery information available. \r\n", __FUNCTION__, PlatformType));
    return EFI_UNSUPPORTED;
  }

  if (!UsbPwrCtrlProtocol)
  {
    Status = gBS->LocateProtocol( &gQcomUsbPwrCtrlProtocolGuid,
                                  NULL,
                                 (VOID **)&UsbPwrCtrlProtocol );

    if((EFI_SUCCESS != Status) || (NULL == UsbPwrCtrlProtocol))
    {
      return EFI_DEVICE_ERROR;
    }
  }

  Status = UsbPwrCtrlProtocol->GetVbusDetectStatus(0,pChargerPresent);

  if (EFI_SUCCESS != Status)
  {
    return Status;
  }

  if (!pQcomChargerProtocol)
  {
    Status = gBS->LocateProtocol(&gQcomChargerProtocolGuid, NULL, (VOID **)&pQcomChargerProtocol);

    if ((EFI_SUCCESS != Status) || (NULL == pQcomChargerProtocol))
    {
      return EFI_DEVICE_ERROR;
    }
  }

//disabling DcIn as Wi Power (Wireless charging) is not supported
  /*Status = pQcomChargerProtocol->IsDcInValid(&DcInValid);

  if (EFI_SUCCESS == Status)
  {
    (*pChargerPresent) |= DcInValid;
  } */

  return Status;
}

```

# fastboot命令控制开关

* `QcomModulePkg/Library/FastbootLib/FastbootCmds.c`fastboot命令支持开关关机充电模式:
```C++
  struct FastbootCmdDesc cmd_list[] = {
      /* By Default enable list is empty */
      {"", NULL},
/*CAUTION(High): Enabling these commands will allow changing the partitions
 *like system,userdata,cachec etc...
 */
#ifdef ENABLE_UPDATE_PARTITIONS_CMDS
      {"flash:", CmdFlash},
      {"erase:", CmdErase},
      {"set_active", CmdSetActive},
      {"flashing get_unlock_ability", CmdFlashingGetUnlockAbility},
      {"flashing unlock", CmdFlashingUnlock},
      {"flashing lock", CmdFlashingLock},
#endif
/*
 *CAUTION(CRITICAL): Enabling these commands will allow changes to bootimage.
 */
#ifdef ENABLE_DEVICE_CRITICAL_LOCK_UNLOCK_CMDS
      {"flashing unlock_critical", CmdFlashingUnLockCritical},
      {"flashing lock_critical", CmdFlashingLockCritical},
#endif
/*
 *CAUTION(CRITICAL): Enabling this command will allow boot with different
 *bootimage.
 */
#ifdef ENABLE_BOOT_CMD
      {"boot", CmdBoot},
#endif
      {"oem enable-charger-screen", CmdOemEnableChargerScreen},
      {"oem disable-charger-screen", CmdOemDisableChargerScreen},
  };

STATIC VOID
CmdOemEnableChargerScreen (CONST CHAR8 *Arg, VOID *Data, UINT32 Size)
{
  EFI_STATUS Status;
  DEBUG ((EFI_D_INFO, "Enabling Charger Screen\n"));

  Status = EnableChargingScreen (TRUE);
  if (Status != EFI_SUCCESS) {
    FastbootFail ("Failed to enable charger screen");
  } else {
    FastbootOkay ("");
  }
}

STATIC VOID
CmdOemDisableChargerScreen (CONST CHAR8 *Arg, VOID *Data, UINT32 Size)
{
  EFI_STATUS Status;
  DEBUG ((EFI_D_INFO, "Disabling Charger Screen\n"));

  Status = EnableChargingScreen (FALSE);
  if (Status != EFI_SUCCESS) {
    FastbootFail ("Failed to disable charger screen");
  } else {
    FastbootOkay ("");
  }
}

```

* 操作如下：
```shell
C:\Users\wugangnan>fastboot oem enable-charger-screen
                                                   OKAY [  0.011s]
Finished. Total time: 0.017s

C:\Users\wugangnan>fastboot getvar charger-screen-enabled
charger-screen-enabled: 1
Finished. Total time: 0.004s
```

# log分析

* 关机拔出usb后打印如下：
```log
   57.119711] charger: [57111] shutting down
```

* 对应代码`healthd_mode_charger.cpp`：
```C++
* Charger::Heartbeat()
  * HandlePowerSupplyState(now);

void Charger::HandlePowerSupplyState(int64_t now) {
    int timer_shutdown = UNPLUGGED_SHUTDOWN_TIME;
    if (!have_battery_state_) return;

    if (!charger_online()) {
        request_suspend(false);
        if (next_pwr_check_ == -1) {
            /* Last cycle would have stopped at the extreme top of battery-icon
             * Need to show the correct level corresponding to capacity.
             *
             * Reset next_screen_transition_ to update screen immediately.
             * Reset & kick animation to show complete animation cycles
             * when charger disconnected.
             */
            timer_shutdown =
                    property_get_int32(UNPLUGGED_SHUTDOWN_TIME_PROP, UNPLUGGED_SHUTDOWN_TIME);
            next_screen_transition_ = now - 1;
            reset_animation(&batt_anim_);
            kick_animation(&batt_anim_);
            next_pwr_check_ = now + timer_shutdown;
            LOGW("[%" PRId64 "] device unplugged: shutting down in %" PRId64 " (@ %" PRId64 ")\n",
                 now, (int64_t)timer_shutdown, next_pwr_check_);
        } else if (now >= next_pwr_check_) {
            LOGW("[%" PRId64 "] shutting down\n", now);
            reboot(RB_POWER_OFF);
        } else {
            /* otherwise we already have a shutdown timer scheduled */
        }
    } else {
        /* online supply present, reset shutdown timer if set */
        if (next_pwr_check_ != -1) {
            /* Reset next_screen_transition_ to update screen immediately.
             * Reset & kick animation to show complete animation cycles
             * when charger connected again.
             */
            request_suspend(false);
            next_screen_transition_ = now - 1;
            reset_animation(&batt_anim_);
            kick_animation(&batt_anim_);
            LOGW("[%" PRId64 "] device plugged in: shutdown cancelled\n", now);
        }
        next_pwr_check_ = -1;
    }
}
```