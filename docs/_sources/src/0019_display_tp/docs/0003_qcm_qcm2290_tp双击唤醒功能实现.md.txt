# README

高通平台qcm2290，TP ILITEK_TDDI_DRIVERV3.X双击唤醒功能调试。

# refers



# 软件流程

键值和开关如下，在probe中会向`ilitek_v3.h`：
```C++
#define ENABLE_GESTURE			ENABLE
/* The example for the gesture virtual keys */
#define GESTURE_DOUBLECLICK				0x58

ilitek_i2c_probe(struct i2c_client *i2c, const struct i2c_device_id *id)
{
#if ENABLE_GESTURE
	ilits->gesture = ENABLE;
	ilits->ges_sym.double_tap = DOUBLE_TAP;
	ilits->ges_sym.alphabet_line_2_top = ALPHABET_LINE_2_TOP;
	ilits->ges_sym.alphabet_line_2_bottom = ALPHABET_LINE_2_BOTTOM;
	ilits->ges_sym.alphabet_line_2_left = ALPHABET_LINE_2_LEFT;
	ilits->ges_sym.alphabet_line_2_right = ALPHABET_LINE_2_RIGHT;
	ilits->ges_sym.alphabet_m = ALPHABET_M;
	ilits->ges_sym.alphabet_w = ALPHABET_W;
	ilits->ges_sym.alphabet_c = ALPHABET_C;
	ilits->ges_sym.alphabet_E = ALPHABET_E;
	ilits->ges_sym.alphabet_V = ALPHABET_V;
	ilits->ges_sym.alphabet_O = ALPHABET_O;
	ilits->ges_sym.alphabet_S = ALPHABET_S;
	ilits->ges_sym.alphabet_Z = ALPHABET_Z;
	ilits->ges_sym.alphabet_V_down = ALPHABET_V_DOWN;
	ilits->ges_sym.alphabet_V_left = ALPHABET_V_LEFT;
	ilits->ges_sym.alphabet_V_right = ALPHABET_V_RIGHT;
	ilits->ges_sym.alphabet_two_line_2_bottom = ALPHABET_TWO_LINE_2_BOTTOM;
	ilits->ges_sym.alphabet_F = ALPHABET_F;
	ilits->ges_sym.alphabet_AT = ALPHABET_AT;
#endif
}

```

原理如下，主要中断判断数据包类型，并向上层发送键值。
```C++
* probe()
  * ili_irq_register(int type)
    * ret = devm_request_threaded_irq(ilits->dev, ilits->irq_num,ilitek_plat_isr_top_half,ilitek_plat_isr_bottom_half,type | IRQF_ONESHOT, "ilitek", NULL);
      * ilitek_plat_isr_bottom_half(int irq, void *dev_id) //中断底半部分，处理事件
        * ili_report_handler();
		  * ilits->wrapper(NULL, 0, ilits->tr_buf, rlen, OFF, OFF);//读取数据到tr_buf
		    * ili_i2c_wrapper(u8 *txbuf, u32 wlen, u8 *rxbuf, u32 rlen, bool spi_irq, bool i2c_irq) //ilitek_i2c.c
              * ili_dump_data(ilits->tr_buf, 8, rlen, 0, "finger report"); //打印数据
              * checksum = ili_calc_packet_checksum(ilits->tr_buf, rlen - 1); //计算checksum
              * pack_checksum = ilits->tr_buf[rlen-1]; //checksum是buf最后一个数
              * if (checksum != pack_checksum && pid != P5_X_I2CUART_PACKET_ID) {ili_dump_data(trdata, 8, rlen, 0, "finger report with wrong");} //比较checksum，数据不对，打印
              * pid = trdata[0]; //数据ID，判断是什么类型的数据
                * switch (pid) 
                  * case P5_X_GESTURE_PACKET_ID:
                  * ili_report_gesture_mode(trdata, rlen);
                    * gc->code = ges[1]; //就是读取buf的第二个数据
                      * switch (gc->code) 
                        * case GESTURE_DOUBLECLICK:
                          * input_report_key(input, KEY_GESTURE_POWER, 1); //实现双击唤醒
```