From 4e86104bc7fb3ee6a82ba3b4cb3f00a44250cdfa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=B1=88=E6=98=8E=E6=9C=88?= <qumy@paxsz.com>
Date: Thu, 23 Sep 2021 21:38:08 +0800
Subject: [PATCH] =?UTF-8?q?[Title]:=20M8=E6=9C=BA=E5=9E=8B=E5=A2=9E?=
 =?UTF-8?q?=E5=8A=A0bms=E5=8A=9F=E8=83=BD?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

[Summary]: M8机型增加bms功能，及接口
	void enableCharge();
    void disableCharge();
    void enablePowerPath();
    void disablePowerPath();
	void setTemporaryFullCharge(int charge);

[Test Plan]: 测试bms

[Module]: bms

[Model]: M8

[author]: qumy@paxsz.com

[date]: 2021-09-23
---
 .../sepolicy/basic/non_plat/system_server.te  |   6 +
 frameworks/base/api/current.txt               |   9 +
 .../core/java/android/app/PaxBmsManager.java  | 127 ++++
 .../android/app/SystemServiceRegistry.java    |  12 +
 .../core/java/android/content/Context.java    |   2 +
 .../base/core/java/android/os/IPaxBms.aidl    |  17 +
 frameworks/base/non-updatable-api/current.txt |   9 +
 .../java/com/android/server/paxbms/OWNERS     |   1 +
 .../android/server/paxbms/PaxBmsService.java  | 116 ++++
 .../java/com/pax}/server/BatteryTermInfo.java |  67 +-
 .../java/com/pax/server/DatabaseHelper.java   |  40 ++
 .../pax}/server/PaxBatteryManagerService.java | 597 +++++++-----------
 .../java/com/pax/util/OsPaxApiInternal.java   | 119 ++++
 frameworks/base/services/core/jni/Android.bp  |   6 +
 ...om_android_server_paxbms_PaxBmsService.cpp | 121 ++++
 frameworks/base/services/core/jni/onload.cpp  |   4 +
 .../java/com/android/server/SystemServer.java |  24 +
 .../30.0/private/compat/29.0/29.0.ignore.cil  |   1 +
 .../api/30.0/private/service_contexts         |   1 +
 .../prebuilts/api/30.0/public/service.te      |   1 +
 .../private/compat/29.0/29.0.ignore.cil       |   1 +
 system/sepolicy/private/service_contexts      |   1 +
 system/sepolicy/public/service.te             |   1 +
 .../MtkSettings/res_ext/values/mtk_arrays.xml |   6 +-
 24 files changed, 907 insertions(+), 382 deletions(-)
 create mode 100755 frameworks/base/core/java/android/app/PaxBmsManager.java
 mode change 100644 => 100755 frameworks/base/core/java/android/content/Context.java
 create mode 100755 frameworks/base/core/java/android/os/IPaxBms.aidl
 create mode 100755 frameworks/base/services/core/java/com/android/server/paxbms/OWNERS
 create mode 100755 frameworks/base/services/core/java/com/android/server/paxbms/PaxBmsService.java
 rename {paxdroid/frameworks/base/services/core/java/com/android => frameworks/base/services/core/java/com/pax}/server/BatteryTermInfo.java (54%)
 create mode 100755 frameworks/base/services/core/java/com/pax/server/DatabaseHelper.java
 rename {paxdroid/frameworks/base/services/core/java/com/android => frameworks/base/services/core/java/com/pax}/server/PaxBatteryManagerService.java (50%)
 create mode 100755 frameworks/base/services/core/java/com/pax/util/OsPaxApiInternal.java
 mode change 100644 => 100755 frameworks/base/services/core/jni/Android.bp
 create mode 100755 frameworks/base/services/core/jni/com_android_server_paxbms_PaxBmsService.cpp

diff --git a/device/mediatek/sepolicy/basic/non_plat/system_server.te b/device/mediatek/sepolicy/basic/non_plat/system_server.te
index a53d5736e65..e86936103c0 100755
--- a/device/mediatek/sepolicy/basic/non_plat/system_server.te
+++ b/device/mediatek/sepolicy/basic/non_plat/system_server.te
@@ -286,3 +286,9 @@ dontaudit system_server shell:unix_stream_socket getopt;
 # Operation : AMS to installd to security
 # Purpose : AMS should not sigkill installd
 dontaudit system_server installd:process sigkill;
+
+# Date : 2021/09/05
+# Operation : Qumy
+# Purpose : bms
+allow system_server default_android_hwservice:hwservice_manager { find };
+allow system_server hal_pax_bms:binder { call };
diff --git a/frameworks/base/api/current.txt b/frameworks/base/api/current.txt
index 842b817e690..ebad20b64d0 100755
--- a/frameworks/base/api/current.txt
+++ b/frameworks/base/api/current.txt
@@ -6103,6 +6103,14 @@ package android.app {
     field public final int suppressedVisualEffects;
   }
 
+  public class PaxBmsManager {
+    method public void disableCharge();
+    method public void disablePowerPath();
+    method public void enableCharge();
+    method public void enablePowerPath();
+    method public void setTemporaryFullCharge(int);
+  }
+
   public final class PendingIntent implements android.os.Parcelable {
     method public void cancel();
     method public int describeContents();
@@ -10217,6 +10225,7 @@ package android.content {
     field public static final String NFC_SERVICE = "nfc";
     field public static final String NOTIFICATION_SERVICE = "notification";
     field public static final String NSD_SERVICE = "servicediscovery";
+    field public static final String PAXBMS_SERVICE = "paxbms";
     field public static final String POWER_SERVICE = "power";
     field public static final String PRINT_SERVICE = "print";
     field public static final int RECEIVER_VISIBLE_TO_INSTANT_APPS = 1; // 0x1
diff --git a/frameworks/base/core/java/android/app/PaxBmsManager.java b/frameworks/base/core/java/android/app/PaxBmsManager.java
new file mode 100755
index 00000000000..8183691ae45
--- /dev/null
+++ b/frameworks/base/core/java/android/app/PaxBmsManager.java
@@ -0,0 +1,127 @@
+/* * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.app;
+import android.content.Context;
+import android.util.Log;
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+import android.os.ServiceManager.ServiceNotFoundException;
+import android.annotation.SuppressLint;
+
+import android.os.ServiceManager;
+import android.os.RemoteException;
+import android.annotation.SystemService;
+import android.os.Binder;
+import android.os.IBinder;
+import android.compat.annotation.UnsupportedAppUsage;
+
+import android.os.IPaxBms;
+import java.util.Objects;
+
+@SystemService(Context.PAXBMS_SERVICE)
+public class PaxBmsManager {
+	//PaxBMSService mBMS;
+	private static final String TAG = "PaxBMSManager";
+	private static PaxBmsManager sInstance;
+	private IPaxBms mBMS;
+	private Context mContext;
+	private final static Object syncObj = new Object();
+
+	
+	/**
+     * @hide
+     */
+     private PaxBmsManager(IPaxBms iBms){
+		Log.d(TAG, "PaxBmsManager created");
+		mBMS = iBms;
+		
+	}
+
+     /**
+     * Gets an instance of the PaxBmsManager manager.
+     *
+     * @return The PaxBmsManager manager instance.
+     * @hide
+     */
+     @UnsupportedAppUsage
+	public static @Nullable PaxBmsManager getInstance() {
+		synchronized (syncObj) {
+        if (sInstance == null) {
+			try {
+				IBinder b = ServiceManager.getServiceOrThrow(Context.PAXBMS_SERVICE);
+				sInstance = new PaxBmsManager(IPaxBms.Stub.asInterface(b));
+			}catch (ServiceNotFoundException e){
+				e.printStackTrace();
+			}
+			
+        }
+        return sInstance;
+      }
+	}
+	
+	//@SuppressLint("NewApi")
+	public void enableCharge(){
+		Log.d(TAG,"enableCharge");
+		try {
+			mBMS.enableCharge();
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}
+	
+	//@SuppressLint("NewApi")
+	public void disableCharge(){
+		Log.d(TAG,"disableCharge");
+		try {
+			mBMS.disableCharge();
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}
+	
+	//@SuppressLint("NewApi")
+	public void enablePowerPath(){
+		Log.d(TAG,"enablePowerPath");
+		try {
+			mBMS.enablePowerPath();
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}
+	
+	//@SuppressLint("NewApi")
+	public void disablePowerPath(){
+		Log.d(TAG,"disablePowerPath");
+		try {
+			mBMS.disablePowerPath();
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}
+	
+	//@SuppressLint("NewApi")
+	public void setTemporaryFullCharge(int fullsoc) {
+		Log.d(TAG,"setFullSoc = "+fullsoc);
+		try {
+			mBMS.setTemporaryFullCharge(fullsoc);
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}
+}
+
+
+
diff --git a/frameworks/base/core/java/android/app/SystemServiceRegistry.java b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
index 111c9820906..1a34352f6d4 100755
--- a/frameworks/base/core/java/android/app/SystemServiceRegistry.java
+++ b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
@@ -219,6 +219,9 @@ import java.lang.reflect.Method;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.Objects;
 
+import android.os.IPaxBms;
+import android.app.PaxBmsManager;
+
 /**
  * Manages all of the system services that can be returned by {@link Context#getSystemService}.
  * Used by {@link ContextImpl}.
@@ -1360,6 +1363,15 @@ public final class SystemServiceRegistry {
                             throws ServiceNotFoundException {
                         return new DreamManager(ctx);
                     }});
+		registerService(Context.PAXBMS_SERVICE, PaxBmsManager.class,
+                new CachedServiceFetcher<PaxBmsManager>() {
+                    @Override
+                    public PaxBmsManager createService(ContextImpl ctx)
+                            throws ServiceNotFoundException {
+                        /*IBinder b = ServiceManager.getService("paxbms");
+                        IPaxBms service = IPaxBms.Stub.asInterface(b);*/
+                        return PaxBmsManager.getInstance();
+                    }});
 
         sInitializing = true;
         try {
diff --git a/frameworks/base/core/java/android/content/Context.java b/frameworks/base/core/java/android/content/Context.java
old mode 100644
new mode 100755
index 8472144a92c..190f30c9383
--- a/frameworks/base/core/java/android/content/Context.java
+++ b/frameworks/base/core/java/android/content/Context.java
@@ -5086,6 +5086,8 @@ public abstract class Context {
      */
     public static final String DYNAMIC_SYSTEM_SERVICE = "dynamic_system";
 
+	public static final String PAXBMS_SERVICE="paxbms";
+
     /**
      * Use with {@link #getSystemService(String)} to retrieve a {@link
      * android.app.blob.BlobStoreManager} for contributing and accessing data blobs
diff --git a/frameworks/base/core/java/android/os/IPaxBms.aidl b/frameworks/base/core/java/android/os/IPaxBms.aidl
new file mode 100755
index 00000000000..089ad286b9b
--- /dev/null
+++ b/frameworks/base/core/java/android/os/IPaxBms.aidl
@@ -0,0 +1,17 @@
+package android.os;
+/** 
+ * @hide 
+*/
+interface IPaxBms {
+    /**
+     * Set the provided set mode to device.
+     *
+     * @param mode: logical mode to set
+     * @return res: result of applying state transformation.
+     */
+    void enableCharge();
+    void disableCharge();
+    void enablePowerPath();
+    void disablePowerPath();
+	void setTemporaryFullCharge(int charge);
+}
diff --git a/frameworks/base/non-updatable-api/current.txt b/frameworks/base/non-updatable-api/current.txt
index 4df7bd8e7be..c5ecc2ca482 100755
--- a/frameworks/base/non-updatable-api/current.txt
+++ b/frameworks/base/non-updatable-api/current.txt
@@ -6103,6 +6103,14 @@ package android.app {
     field public final int suppressedVisualEffects;
   }
 
+  public class PaxBmsManager {
+    method public void disableCharge();
+    method public void disablePowerPath();
+    method public void enableCharge();
+    method public void enablePowerPath();
+    method public void setTemporaryFullCharge(int);
+  }
+
   public final class PendingIntent implements android.os.Parcelable {
     method public void cancel();
     method public int describeContents();
@@ -10217,6 +10225,7 @@ package android.content {
     field public static final String NFC_SERVICE = "nfc";
     field public static final String NOTIFICATION_SERVICE = "notification";
     field public static final String NSD_SERVICE = "servicediscovery";
+    field public static final String PAXBMS_SERVICE = "paxbms";
     field public static final String POWER_SERVICE = "power";
     field public static final String PRINT_SERVICE = "print";
     field public static final int RECEIVER_VISIBLE_TO_INSTANT_APPS = 1; // 0x1
diff --git a/frameworks/base/services/core/java/com/android/server/paxbms/OWNERS b/frameworks/base/services/core/java/com/android/server/paxbms/OWNERS
new file mode 100755
index 00000000000..17931f0f748
--- /dev/null
+++ b/frameworks/base/services/core/java/com/android/server/paxbms/OWNERS
@@ -0,0 +1 @@
+shanliangliang@paxsz.com
diff --git a/frameworks/base/services/core/java/com/android/server/paxbms/PaxBmsService.java b/frameworks/base/services/core/java/com/android/server/paxbms/PaxBmsService.java
new file mode 100755
index 00000000000..7008fd1ee1b
--- /dev/null
+++ b/frameworks/base/services/core/java/com/android/server/paxbms/PaxBmsService.java
@@ -0,0 +1,116 @@
+/* * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.paxbms;
+
+import android.app.ActivityManager;
+import android.content.Context;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.PowerManager;
+import android.os.Trace;
+import android.provider.Settings;
+import android.util.Slog;
+import android.view.SurfaceControl;
+import android.util.Log;
+import android.content.Context;
+
+import com.android.server.SystemService;
+import android.os.IPaxBms;
+import android.os.SystemProperties;
+import android.os.RemoteException;
+import android.annotation.SuppressLint;
+
+public class PaxBmsService extends IPaxBms.Stub {
+    static final String TAG = "PaxBMSService";
+    static final boolean DEBUG = false;
+    private final Context mContext;
+	public static final String TemporaryFullCharge = "sys.bms.temporary_full_charge";
+
+   public PaxBmsService(Context context) {
+   		super();
+        mContext = context;
+    } 
+	
+
+	
+   
+   // @SuppressLint("NewApi")
+    @Override
+    public void enableCharge() {
+        Log.d(TAG,"enableCharge");
+        try {
+           enableCharge_native();
+        } catch (Exception e){
+           e.printStackTrace();
+        } finally {
+           Trace.traceEnd(Trace.TRACE_TAG_POWER);
+        }
+    }
+   
+    //@SuppressLint("NewApi")
+    @Override
+    public void disableCharge() {
+        Log.d(TAG,"disableCharge ");
+        try {
+           disableCharge_native();
+        } catch (Exception e){
+           e.printStackTrace();
+        }finally {
+           Trace.traceEnd(Trace.TRACE_TAG_POWER);
+        }
+    }
+    
+    //@SuppressLint("NewApi")
+     @Override
+    public void enablePowerPath() {
+        Log.d(TAG,"enablePowerPath ");
+        try {
+           enablePowerPath_native();
+        } catch (Exception e){
+           e.printStackTrace();
+        }finally {
+           Trace.traceEnd(Trace.TRACE_TAG_POWER);
+        }
+    }
+    
+    //@SuppressLint("NewApi")
+     @Override
+    public void disablePowerPath() {
+        Log.d(TAG,"disablePowerPath");
+        try {
+           disablePowerPath_native();
+        } catch (Exception e){
+           e.printStackTrace();
+        }finally {
+           Trace.traceEnd(Trace.TRACE_TAG_POWER);
+        }
+    }
+
+	
+	//@SuppressLint("NewApi")
+	 @Override
+    public void setTemporaryFullCharge(int charge) {
+    	SystemProperties.set(TemporaryFullCharge,String.valueOf(charge));
+    }
+    public void onStart() {
+        Slog.e(TAG, "onStart");
+    }
+    static native void enableCharge_native();
+    static native void disableCharge_native();
+    static native void enablePowerPath_native();
+    static native void disablePowerPath_native();
+}
diff --git a/paxdroid/frameworks/base/services/core/java/com/android/server/BatteryTermInfo.java b/frameworks/base/services/core/java/com/pax/server/BatteryTermInfo.java
similarity index 54%
rename from paxdroid/frameworks/base/services/core/java/com/android/server/BatteryTermInfo.java
rename to frameworks/base/services/core/java/com/pax/server/BatteryTermInfo.java
index e045b4a0293..3e88c96d3b2 100755
--- a/paxdroid/frameworks/base/services/core/java/com/android/server/BatteryTermInfo.java
+++ b/frameworks/base/services/core/java/com/pax/server/BatteryTermInfo.java
@@ -1,10 +1,16 @@
-package com.android.server;
-
+package com.pax.server;
+import com.android.server.paxbms.PaxBmsService;
+import android.content.Context;
+import android.os.ServiceManager;
+import android.util.Log;
 import android.os.SystemProperties;
-
+import android.app.PaxBmsManager;
+import android.os.IPaxBms;
+import android.os.IBinder;
+import android.os.RemoteException;
 public class BatteryTermInfo {
     private String model;
-    private int save_data_min;
+    private long save_data_min;
     private int curmode;
     private int predicted_hours;
     private int recharge;
@@ -14,25 +20,38 @@ public class BatteryTermInfo {
     public static int TIMEOUT_X_HOUR = 86400;	// 24h = 24*60*60s
     public static int TIMEOUT_1_MIN	= 60;	// 60s
     public static int SAVE_DAYS	= 7;
-    public static int PREDICTED_DAYS_MIN = 3;
+    //public static int PREDICTED_DAYS_MIN = 3;//
+    public static int PREDICTED_DAYS_MIN = 1;//
     public static int PREDICTED_HOURS_DEFAULT = 6;
+    public static int PREDICTED_DAYS = 7;//
 
     public int AUTO_MODE = 0;
     public int MOBILE_MODE = 1;
     public int COUNTER_TOP_MODE = 2;
     public int saveday = SAVE_DAYS;
-	public static int MOBILE_MODE_RECHARGE = 85;
-	public static int COUNTER_TOP_MODE_RECHARGE = 65;
-	public static int MOBILE_MODE_FULLCHARGE = 100;
-	public static int COUNTER_TOP_MODE_FULLCHARGE = 80;
-	
+    public static int MOBILE_MODE_RECHARGE = 85;
+    public static int MOBILE_MODE_FULLCHARGE = 100;
+    public static int COUNTER_TOP_MODE_RECHARGE = 65;
+    public static int COUNTER_TOP_MODE_FULLCHARGE = 80;
+    Context mContext;
+    IPaxBms bms;
+    protected static IPaxBms getBMSBinder()
+    {
+           IBinder binder = ServiceManager.getService(Context.PAXBMS_SERVICE);
+	  if (binder == null) {
+		return null;
+	  }
+	  return IPaxBms.Stub.asInterface(binder);
+    }
 
-    public BatteryTermInfo(int curmode){
+    public BatteryTermInfo(Context context,int curmode){
+		mContext = context;
         this.model = SystemProperties.get("ro.product.model","");
-        if(model.equals("M50") || model.equals("A800")){//M50,3, , 5
+        if(model.equals("M50") || model.equals("A800") || model.equals("M8")){//M50,3, , 5
             this.curmode = curmode;
             this.predicted_hours = PREDICTED_HOURS_DEFAULT;
-            this.save_data_min =  (60 * 60 *this.predicted_hours * PREDICTED_DAYS_MIN * 1000) * 95 / 100;//至少3天的数据
+            this.save_data_min =  (long)(60 * 60 *this.predicted_hours * PREDICTED_DAYS_MIN * 1000) * 95 / 100;//至少3天的数据
+            Log.d("test","save_data_min0 = "+save_data_min);
             if(curmode == COUNTER_TOP_MODE){
                 this.recharge = COUNTER_TOP_MODE_RECHARGE;
                 this.fullcharge = COUNTER_TOP_MODE_FULLCHARGE;
@@ -42,20 +61,24 @@ public class BatteryTermInfo {
             }
             this.saveday = SAVE_DAYS;
         }
-
+		//bms = getBMSBinder();
     }
 
-    public BatteryTermInfo(int save_data_min,int curmode,int predicted_hours){
+    public BatteryTermInfo(Context context,int save_data_min,int curmode,int predicted_hours){
+    	mContext = context;
         this.model = SystemProperties.get("ro.product.model","");
         this.predicted_hours = predicted_hours;
         this.save_data_min =  (60 * 60 *this.predicted_hours * PREDICTED_DAYS_MIN * 1000) * 95 / 100;
+		Log.d("test","save_data_min1 = "+save_data_min);
         this.curmode = curmode;
+	//bms = getBMSBinder();
     }
 
     public String getModel(){
         return model;
     }
-    public int getSave_data_min(){
+    public long  getSave_data_min(){
+    	Log.d("test","save_data_min2 = "+save_data_min);
         return save_data_min;
     }
     public int getCurmode(){
@@ -72,15 +95,25 @@ public class BatteryTermInfo {
     }
 
     public void setCurmode(int batterymode){
+   	Log.d("BatteryTermInfo","batterymode = "+batterymode);
         this.curmode = batterymode;
         if(batterymode == COUNTER_TOP_MODE){
 			this.recharge = COUNTER_TOP_MODE_RECHARGE;
             this.fullcharge = COUNTER_TOP_MODE_FULLCHARGE;
-            
         }else {
             this.recharge = MOBILE_MODE_RECHARGE;
             this.fullcharge = MOBILE_MODE_FULLCHARGE;
         }
+	/*if(bms!=null){
+		try {
+			bms.setMode(batterymode);
+			bms.setFullSoc(this.fullcharge);
+		} catch (RemoteException e){
+			e.printStackTrace();
+		}
+	}else{
+		Log.d("BatteryTermInfo","bms==null ");
+	}*/
     }
     public int getRecharge(){
         return recharge;
diff --git a/frameworks/base/services/core/java/com/pax/server/DatabaseHelper.java b/frameworks/base/services/core/java/com/pax/server/DatabaseHelper.java
new file mode 100755
index 00000000000..16892a64500
--- /dev/null
+++ b/frameworks/base/services/core/java/com/pax/server/DatabaseHelper.java
@@ -0,0 +1,40 @@
+package com.pax.server;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+public class DatabaseHelper extends SQLiteOpenHelper {
+
+    //private static final String NAME = "batterylog.db";
+    private static final int VERSION = 1;
+    private static final String batterylog_NAME = "batterylog.db";
+    private static final String StartupShutdownlog_NAME = "StartupShutdownlog.db";
+    private String CREATETABLE_BATTERYLOG = "create table if not exists batterylog(power int NOT NULL,createTime Text DEFAULT (strftime('%Y-%m-%d %H:%M:%S','now','localtime')));";
+    private String CREATETABLE_STARTUPSHUTDOWN = "create table if not exists StartupShutdownlog(poweron int NOT NULL,createTime Text DEFAULT (strftime('%Y-%m-%d %H:%M:%S','now','localtime')));";
+    String name;
+
+
+    public DatabaseHelper(Context context,String NAME) {
+        super(context, NAME, null, VERSION);
+        this.name = NAME;
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        String createtable_sql = "";
+        if(this.name.equals(batterylog_NAME)){
+            createtable_sql = CREATETABLE_BATTERYLOG;
+        }else if(this.name.equals(StartupShutdownlog_NAME)){
+            createtable_sql = CREATETABLE_STARTUPSHUTDOWN;
+        }
+        db.execSQL(createtable_sql);
+    }
+
+
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+}
diff --git a/paxdroid/frameworks/base/services/core/java/com/android/server/PaxBatteryManagerService.java b/frameworks/base/services/core/java/com/pax/server/PaxBatteryManagerService.java
similarity index 50%
rename from paxdroid/frameworks/base/services/core/java/com/android/server/PaxBatteryManagerService.java
rename to frameworks/base/services/core/java/com/pax/server/PaxBatteryManagerService.java
index 22063cebcca..1e95d48ef53 100755
--- a/paxdroid/frameworks/base/services/core/java/com/android/server/PaxBatteryManagerService.java
+++ b/frameworks/base/services/core/java/com/pax/server/PaxBatteryManagerService.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.server;
+package com.pax.server;
 
 
 import android.app.AlarmManager;
@@ -48,25 +48,25 @@ import java.util.Random;
 import android.os.ServiceManager;
 import java.util.Calendar;
 import java.io.File;
-
-
-
-//import android.os.Handler;
-//import android.os.Message;
-
+import com.android.server.SystemService;
 import android.util.Log;
 import android.os.SystemProperties;
+import android.app.PaxBmsManager;
+import android.os.IPaxBms;
+import android.os.RemoteException;
 
 import static android.content.Context.ALARM_SERVICE;
 
 public final class PaxBatteryManagerService extends SystemService {
     private static final String TAG = PaxBatteryManagerService.class.getSimpleName();
-
-    private static final boolean DEBUG = false;
+    private static boolean DEBUG = !SystemProperties.get("ro.build.type").equals("user");
 	private String BatteryType = "persist.sys.battery.type";
 	private String AUTO_BatteryType = "persist.sys.battery.autotype";
 	private String ResetBMSDB = "persist.sys.bms.db";
 	public String Shutdown_time = "persist.sys.shutdowntime";
+	private String auto_static_time = "persist.sys.bms.auto_static_time";//自动模式切换到固定模式的时间点
+	private String static_auto_time = "persist.sys.bms.static_auto_time";//固定模式切换到自动模式的时间点
+	public static final String TemporaryFullCharge = "sys.bms.temporary_full_charge";
 	public int AUTO_MODE = 0;
 	public int MOBILE_MODE = 1;
 	public int COUNTER_TOP_MODE = 2;
@@ -88,16 +88,13 @@ public final class PaxBatteryManagerService extends SystemService {
 	private int mBatteryLevel;
 	private Context mContext;
 	private final String path = "sys/devices/platform/charger/charge_enable";
-	private final String disable_charge_reason = "data/system/tmp/why_not_charging";
+	private final String disable_charge_reason = "tmp/why_not_charging";
 	public int reChargeLevel = 0;
 	public int fullChageLevel = 100;
 	public int chargeState = -1;
+	public int powerState = 1;
 	SQLiteDatabase batterylog_db = null;
-	SQLiteDatabase StartupShutdownlog_db = null;
-
 	private static final String batterylog_NAME = "batterylog.db";
-	private static final String StartupShutdownlog_NAME = "StartupShutdownlog.db";
-
 
 	DatabaseHelper database1;
 	DatabaseHelper database2;
@@ -107,6 +104,7 @@ public final class PaxBatteryManagerService extends SystemService {
 	AlarmManager am;
 	public static final String  broadcastDel_DB = "paxbatteryAlarm.operation.delDB";
 	public static final String  broadcastCheck_Mode = "paxbatteryAlarm.operation.checkMode";
+	public static final String  broadcast_AUTO= "paxbms.operaiton.changetoAuto";
 	BatteryReceiver myReceiver;
 	PowerManager.WakeLock wl;
 	public static final int CHARGEING = 1;
@@ -118,16 +116,22 @@ public final class PaxBatteryManagerService extends SystemService {
 	public int sleeptime = 0;
 	int poweron = 1;
 	int poweroff = 0;
+	int suspend_mode = 3;
+	//int wake_up = 1;
+	int shutdown_mode = 4;
 	String predicted_starttime;
 	String predicted_endtime;
 	public static int recodetime = 30000;
 	DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 	SimpleDateFormat df_str = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-
+	private static int Boot_flag = 0;
+	private static int Change_Automode_flag = 0;
+	//IPaxBms pax_bms;
+	PaxBmsManager paxBmsManager;
 
 	public PaxBatteryManagerService(Context context) {
         super(context);
-		Log.d(TAG,"PaxBatteryManagerService");
+		if(DEBUG)Log.d(TAG,"PaxBatteryManagerService");
 
         mContext = context;
         mBatteryManagerInternal = getLocalService(BatteryManagerInternal.class);
@@ -135,14 +139,17 @@ public final class PaxBatteryManagerService extends SystemService {
 		mContext.registerReceiver(myReceiver, new IntentFilter(broadcastDel_DB));
 		mContext.registerReceiver(myReceiver, new IntentFilter(Intent.ACTION_BOOT_COMPLETED));//监听开机广播
 		mContext.registerReceiver(myReceiver, new IntentFilter(Intent.ACTION_SHUTDOWN));//监听关机广播
+
+		paxBmsManager = (PaxBmsManager)mContext.getSystemService(Context.PAXBMS_SERVICE);
 	}
 
 	public void onStart() {
-		Log.d(TAG,"onStart");
+		if(DEBUG)Log.d(TAG,"onStart");
 		am = (AlarmManager)mContext.getSystemService(ALARM_SERVICE);
 		PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
 		wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
 		wl.acquire();
+		//PaxBatteryThread1 pbthread = new PaxBatteryThread1();
 		PaxBatteryThread pbthread = new PaxBatteryThread();
 		pbthread.start();
 	}
@@ -156,53 +163,71 @@ public final class PaxBatteryManagerService extends SystemService {
 		}else{
 			mode = Integer.valueOf(SystemProperties.get(BatteryType));
 		}
-		Log.d(TAG,"mode = "+mode);
+		if(DEBUG)Log.d(TAG,"mode = "+mode);
 		return mode;
 	}
 
 	public void initBatterylogDB(){
 		database1 = new DatabaseHelper(mContext,batterylog_NAME);//传入一个上下文参数
 		batterylog_db = database1.getWritableDatabase();
-		Log.d(TAG,"batterylog_db path = "+batterylog_db.getPath());
-	}
-
-	public void initStartupShutdownlogDB(){
-		database2 = new DatabaseHelper(mContext,StartupShutdownlog_NAME);//传入一个上下文参数
-		StartupShutdownlog_db = database2.getWritableDatabase();
-		Log.d(TAG,"StartupShutdownlog_db path = "+StartupShutdownlog_db.getPath());
+		if(DEBUG)Log.d(TAG,"batterylog_db path = "+batterylog_db.getPath());
 	}
 
 	public void init(){
-		Log.d(TAG,"PaxBatteryManagerService init");
+		if(DEBUG)Log.d(TAG,"PaxBatteryManagerService init");
 		initBatterylogDB();
-		initStartupShutdownlogDB();
-		initcurMode = getInitcurMode();//
-		batteryTermInfo = new BatteryTermInfo(initcurMode);//初始化模式
+		initcurMode = getInitcurMode();
+		if(initcurMode == 0){
+			initcurMode = Integer.valueOf(SystemProperties.get(AUTO_BatteryType));
+		}
+		if(DEBUG)Log.d(TAG,"init initcurMode = "+initcurMode);
+		batteryTermInfo = new BatteryTermInfo(mContext,initcurMode);//初始化模式
 		batteryTermInfo.setSaveday(SAVE_DAYS);
 
-		if(SystemProperties.get(ResetBMSDB,"0").equals("1")){
-			delDB(-1);//
-		}else{
-			delDB(batteryTermInfo.getSaveDays());
-		}
-		//mTimer_DelData.schedule(mTask_DelDB,TIMEOUT_X_HOUR,TIMEOUT_X_HOUR);
 		mContext.registerReceiver(myReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));//监听电池变化的广播
+		mContext.registerReceiver(myReceiver, new IntentFilter(broadcast_AUTO));
 	}
+
 //1.休眠测试，
 	class PaxBatteryThread extends Thread {
 			@Override
 			public void run() {
-				Log.d(TAG, "PaxBatteryThread run1");
+				while(Boot_flag == 0){
+					SystemClock.sleep(3000);
+					Log.d(TAG,"Wait ACTION_BOOT_COMPLETED");
+				}
+				if(DEBUG)Log.d(TAG, "PaxBatteryThread run1");
 				init();
 				sleeptime = 3000;
-				setAlarm(TIMEOUT_X_HOUR);//24h,删除数据
+				//setAlarm(TIMEOUT_X_HOUR);//24h,删除数据
 				Log.d(TAG, "mBatteryManagerInternal.getPlugType() = " + mBatteryManagerInternal.getPlugType());
 				int count_times = 0;
 				int PLUGGED_flag = 0;
 				while (true) {
 					//count_times++;
-					Log.d(TAG, "count_times = " + count_times);
-					if(mBatteryManagerInternal.getPlugType() != OsProtoEnums.BATTERY_PLUGGED_NONE){//机器插入电源线
+					if(DEBUG)Log.d(TAG, "count_times = " + count_times);
+					Log.d(TAG, "Boot_flag = " + Boot_flag);
+					if(Boot_flag == 1){//开机flag
+					   Remove_outdated_data();//开机删除无效数据或清空数据库
+					   SystemClock.sleep(1000);
+					   if(getInitcurMode() == AUTO_MODE){//如果是自动模式则记录关机时间
+							String time = SystemProperties.get(Shutdown_time,"");
+					        Batch_insert(time,"",shutdown_mode);
+					   }
+					   setAlarm(TIMEOUT_X_HOUR);//开机后设置一次
+					   Boot_flag = 0;
+					}
+					if(Change_Automode_flag == 1){//接收设置发来的广播
+						String a_s_time =SystemProperties.get(auto_static_time,"");
+						String s_a_time = SystemProperties.get(static_auto_time,"");
+						if(!a_s_time.equals("") && !s_a_time.equals("")){
+							Batch_insert(a_s_time,s_a_time,shutdown_mode);
+							SystemProperties.set(auto_static_time,"");
+							SystemProperties.set(static_auto_time,"");
+						}
+						Change_Automode_flag = 0;
+					}
+					if(mBatteryManagerInternal.getPlugType() != OsProtoEnums.BATTERY_PLUGGED_NONE && getInitcurMode() == AUTO_MODE){//机器插入电源线
 						if(PLUGGED_flag == 0){
 							PLUGGED_flag = 1;
 							count_times = count_times/3;
@@ -211,10 +236,10 @@ public final class PaxBatteryManagerService extends SystemService {
 							Log.d(TAG, "acquire LOCK");
 							wl.acquire();
 						}
-						Log.d(TAG, "power = " + power);
-						Log.d(TAG, "mBatteryLevel = " + mBatteryLevel);
+						if(DEBUG)Log.d(TAG, "power = " + power);
+						if(DEBUG)Log.d(TAG, "mBatteryLevel = " + mBatteryLevel);
 						power = 1;
-						insertDB(power);//只写power = 1
+						insertDB(power,null);//只写power = 1
 						sleeptime = 30000;
 					}else {
 						if(wl.isHeld()){
@@ -227,16 +252,8 @@ public final class PaxBatteryManagerService extends SystemService {
 						}
 						sleeptime = 10000;
 					}
-					initcurMode = getInitcurMode();
-					if(initcurMode != batteryTermInfo.getCurmode()){
-						batteryTermInfo.setCurmode(initcurMode);
-						if(mBatteryManagerInternal.getPlugType() != OsProtoEnums.BATTERY_PLUGGED_NONE && mBatteryManagerInternal.getBatteryLevel() >= batteryTermInfo.getFullcharge() && chargeState == CHARGEING){
-							setChargeState(DISCHARGE);
-							chargeState = DISCHARGE;
-						}
-					}
-					if (batteryTermInfo.getCurmode() == AUTO_MODE) {//自动模式去切换模式
-						if(mBatteryLevel >= COUNTER_TOP_MODE_RECHARGE){
+					if (getInitcurMode() == AUTO_MODE) {//自动模式去切换模式
+						if(mBatteryLevel >= COUNTER_TOP_MODE_RECHARGE){//
 							if (count_times == 0) {//电量高于桌面模式回充电量，再去检测切换模式
 								int mode = checkMode();
 								batteryTermInfo.setCurmode(mode);
@@ -259,271 +276,120 @@ public final class PaxBatteryManagerService extends SystemService {
 			}
 	}
 
-
+	public void Remove_outdated_data(){
+		if(DEBUG)Log.d(TAG, "Remove_outdated_data ");
+		if(SystemProperties.get(ResetBMSDB,"0").equals("1")){
+			SystemProperties.set(Shutdown_time,"");//删除记录的关机时间
+			if(getInitcurMode() != AUTO_MODE){
+				Date before7Days = getBeforeDays(BatteryTermInfo.PREDICTED_DAYS,0);
+				SystemProperties.set(auto_static_time,df.format(before7Days));
+			}
+			delDB(-1);//
+		}else{
+			//delDB(batteryTermInfo.getSaveDays());
+		}
+	}
 	public int checkMode(){
-    	Log.d(TAG,"checkMode");
+    	if(DEBUG)Log.d(TAG,"checkMode");
 		int mode = -1;
+		delDB(batteryTermInfo.getSaveDays());//清楚无效数据
+		SystemClock.sleep(10000);
 		long total = batteryTermInfo.getSaveDays()*batteryTermInfo.getPredicted_hour()*60*60*1000;
-		Log.d(TAG,"checkMode total = "+total);
-		Log.d(TAG,"save_data_min = "+batteryTermInfo.getSave_data_min());
-		long validTime = total - getInvalidTime();
-		Log.d(TAG,"validTime = "+validTime);
-		if(validTime >=batteryTermInfo.getSave_data_min()){
-			int PA = queryDB(1);//插适配器
-			Log.d(TAG,"PA = "+PA);
+		if(DEBUG)Log.d(TAG,"checkMode total = "+total);
+		if(DEBUG)Log.d(TAG,"save_data_min = "+batteryTermInfo.getSave_data_min());
+		long ShutdownTime = queryDB(shutdown_mode);
+		if(DEBUG)Log.d(TAG,"checkMode ShutdownTime = "+ShutdownTime);
+		long validTime = total - ShutdownTime*recodetime;
+		if(DEBUG)Log.d(TAG,"checkMode validTime = "+validTime);
+		long PA = queryDB(1);//插适配器
+		if(DEBUG)Log.d(TAG,"checkMode PA = "+PA);
+		long save_data_min = batteryTermInfo.getSave_data_min();
+		if(DEBUG)Log.d(TAG,"checkMode save_data_min  = "+save_data_min);
+		if(validTime > save_data_min){
 			long PA_time = PA * recodetime;
 			long PB_time = validTime - PA_time;
-			if(PA_time > PB_time){
+			if((PA_time * 10)/validTime >= 9){//充电时间大于90%
 				// 历时记录中当前时间段插适配器多于不插适配器数据，桌面模式
 				mode = COUNTER_TOP_MODE;
 			}else{
-				//batteryTermInfo.setCurmode(MOBILE_MODE);
 				mode = MOBILE_MODE;
 			}
-		} else{
+		}else{
+			Log.d(TAG,"data min");
 			mode = MOBILE_MODE;//数据量不够时，默认移动模式
 		}
 		Log.d(TAG,"checkMode mode = "+mode);
 		return mode;
 	}
 
-    public int setChargeState(int state){
-        try {
-            Log.d(TAG,"setChargeState: "+state);
-            FileOutputStream out = new FileOutputStream(path);//enable_charge
-            out.write(state+'0');
-            out.close();
-			writeWhynotCharingFile(state);
-            Log.d(TAG,"setChargeState over");
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return 0;
-    }
-
-	public String getDBFirstOrLast(boolean First){
-		String createTime = null;
-		Cursor cursor = batterylog_db.query("batterylog", null, null, null, null, null, null);
-		if (cursor != null) {
-			if(First){
-				if(cursor.moveToFirst()){
-					createTime = cursor.getString(cursor.getColumnIndex("createTime"));
-				}
-			}else {
-				if(cursor.moveToLast()){
-					createTime = cursor.getString(cursor.getColumnIndex("createTime"));
-				}
-			}
-			
-		}
-		cursor.close();
-		return createTime;
-	}
-	public int getDiffTime(){
-		int diffTime = -1;
-		String FirstTime = getDBFirstOrLast(true);
-		String LastTime = getDBFirstOrLast(false);
-		if( null == FirstTime || null == LastTime || FirstTime.isEmpty() || LastTime.isEmpty()){
-			return diffTime;
-		}else{
-			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-			try {
-				Date first = df.parse(FirstTime);
-				Date last = df.parse(LastTime);
-				long diff = last.getTime() - first.getTime();
-				diffTime = (int)(diff/(1000*60*60*24));
-				Log.d(TAG,"diffTime = "+diffTime);
-			} catch (ParseException e) {
-				e.printStackTrace();
-			}
-		}
-		return diffTime;
-	}
-
-	public long  getInvalidTime(){
-		long total = 0;
-		int status = -1;
-		int nhour = 1;
-		String tmp = df_str.format(getBeforeDays(batteryTermInfo.SAVE_DAYS));//start time
-		Log.d(TAG,"tmp = "+tmp);
-		String start = tmp;
-		String t1 = String.format("strftime('%%H','now','localtime','+%d hour')",nhour);
-		String t2 = String.format("strftime('%%H','now','localtime','+%d hour')",nhour+batteryTermInfo.getPredicted_hour());
-		String t3 = String.format("strftime('%%H','now','localtime','+%d hour')",batteryTermInfo.getPredicted_hour());
-		int laststatus = 0;//关机
-		String queryStartup_time = String.format("select * from StartupShutdownlog where " +
-						"( case when %s < %s" +
-						"then strftime('%%H', createTime) between %s and %s" +
-						"else strftime('%%H', createTime) not between %s and strftime('%%H','now','localtime')end ) ORDER by createTime asc;"
-				,t1,t2,t1,t3,t2);
-		Cursor cursor = StartupShutdownlog_db.rawQuery(queryStartup_time,null);
-		if(cursor != null && cursor.getCount() !=0){
-			while (cursor.moveToNext()){
-				status = cursor.getInt(cursor.getColumnIndex("poweron"));
-				String createTime = cursor.getString(cursor.getColumnIndex("createTime"));
-				Log.d(TAG,"createTime = "+createTime);
-				try{
-					Date createTime1 = df.parse(createTime);
-					if(createTime1.after(getBeforeDays(batteryTermInfo.SAVE_DAYS))){
-						Log.d(TAG,"createTime1 = "+createTime1.toString());
-						if(poweron == status && laststatus == 0 ){//开机，计算无效时间
-						    laststatus = 1;
-							total = total + transTime(tmp,createTime,start);//加无效时间
-							Log.d(TAG,"total0 = "+total);
-						}else if(poweroff == status){ //如果StartupShutdownlog_db中有两个1连在一起则不计算该时间为无效时间
-							laststatus = 0;
-						}
-						tmp = createTime;
-					}
-				}catch (ParseException e) {
-					e.printStackTrace();
-				}
-				
+	public void Batch_insert(String time1,String time2,int num_mode){
+		int num = -1;
+		String time = time1;
+		Date endTime;
+		if(DEBUG)Log.d(TAG,"Batch_insert time = "+time);
+		Date startTime;
+		int i=0;
+		Date before7days = getBeforeDays(BatteryTermInfo.PREDICTED_DAYS,0);
+		try {
+			if(time.isEmpty()|| time == null || df.parse(time).before(before7days) ){
+				startTime = before7days;
+			}else{
+				startTime = df.parse(time);
 			}
-		}else{
-			String qureyStr = "select * FROM StartupShutdownlog Order By createTime ASC";
-			Cursor cursor1 = StartupShutdownlog_db.rawQuery(qureyStr,null);
-			Date tmp_createTime1;
-			Date createTime1;
-			int tmp_status = -1;
-			int flag = 0;
-			Date firstTime = getBeforeDays(batteryTermInfo.SAVE_DAYS);
-			int days = batteryTermInfo.SAVE_DAYS;
-			int days_flag = 0;
-			if(cursor1 != null && cursor1.getCount() !=0){
-				//if(cursor1.moveToFirst()){
-					while(cursor1.moveToNext()){
-						status = cursor1.getInt(cursor1.getColumnIndex("poweron"));
-						String createTime = cursor1.getString(cursor1.getColumnIndex("createTime"));
-						Log.d(TAG,"createTime = "+createTime);
-						Log.d(TAG,"status = "+status);
-						try{
-							createTime1 = df.parse(createTime);
-							if(createTime1.before(firstTime)){
-								tmp_createTime1 = createTime1;
-								tmp_status = status;
-							}else {
-								days_flag = days;
-								while(createTime1.after(firstTime) && days > 0){
-									days-=1;
-									firstTime = getBeforeDays(days);
-								}
-								if(tmp_status == 0 || tmp_status == -1){//关机时间有从0-1；或者第一条数据是1则表示之前都是关机
-									if(status == 1){
-										Log.d(TAG,"days = "+days);
-										total += (days_flag - days)*6*60*60*1000;
-									}else{
-										continue;
-									}
-								}
-								tmp_createTime1 = createTime1;
-								tmp_status = status;
-							}
-						}catch (ParseException e) {
-							e.printStackTrace();
-						}
-					}
-					if(tmp_status == 0 && days > 0 ){
-						Log.d(TAG,"remain days = "+days);
-						total += days*6*60*60*1000;
-					}
-				//}
+			if(time2.isEmpty()|| time2 == null){
+				if(DEBUG)Log.d(TAG,"time2 == null");
+				endTime = new Date();
 			}else{
-				total = batteryTermInfo.getSaveDays()*batteryTermInfo.getPredicted_hour()*60*60*1000;
+				endTime = df.parse(time2);
+			}
+			num = num_mode;
+			if(DEBUG)Log.d(TAG,"endTime = "+df.format(endTime));
+	  		long diff = endTime.getTime()-startTime.getTime();
+	  		long instert_num = diff/(recodetime);
+			Log.d(TAG,"Batch_insert instert_num = "+instert_num);
+			int sen = 30;
+			time = df.format(startTime);
+			Log.d(TAG,"Batch_insert time = "+time);
+			while(i < instert_num){
+				String instert_str=String.format("INSERT INTO batterylog VALUES(%d,dateTime('%s','+%d second'))",num,time,sen*i);
+				//if(DEBUG)Log.d(TAG,"Batch_insert num = "+num + "instert_str = "+instert_str);
+				batterylog_db.execSQL(instert_str);
+				i++;
 			}
+		}catch (ParseException e) {
+			e.printStackTrace();
 		}
-		Log.d(TAG,"total = "+total);
-		return total;
+      	SystemProperties.set(Shutdown_time,"");
 	}
 
 
-	public Date getBeforeDays(int days){
+
+	public Date getBeforeDays(int days,int hours){
 		if(days < 0 ) days=0;
 		Calendar calendar = Calendar.getInstance();
-		calendar.add(Calendar.DAY_OF_YEAR, -days);
-		calendar.add(Calendar.HOUR_OF_DAY, +1);
+		if(days > 0){
+			calendar.add(Calendar.DAY_OF_YEAR, -days);
+		}
+		if(hours != 0){
+			calendar.add(Calendar.HOUR,hours);
+		}
 		Date newDate = calendar.getTime();
+		if(hours == 0){
+			newDate.setHours(0);
+		}
 		newDate.setMinutes(0);
         newDate.setSeconds(0);
 		return newDate;
 	}
 
-	public long transTime(String startTime,String endTime,String start){
-		long startTime1;
-		long endTime1;
-		long start1;//第一个时间段最开始的时间
-		long end1;//第一个时间段最末尾的时间
-		long diffTime = 0;
-		long prehour = batteryTermInfo.getPredicted_hour()*60*60*1000;
-
-		Log.d(TAG,"startTime = "+startTime);
-		Log.d(TAG,"endTime = "+endTime);
-		Log.d(TAG,"start = "+start);
-		if(startTime.isEmpty() || endTime.isEmpty() || start.isEmpty())
-			return diffTime;
-
-		try {
-			startTime1 = df.parse(startTime).getTime();
-			endTime1 = df.parse(endTime).getTime();
-			start1 = df.parse(start).getTime();//时间段最开始的时间
-			end1 = start1+prehour;//第一个时间段最末尾的时间
-
-			if(startTime1 < start1 || endTime1 < start1 || endTime1 < startTime1 )
-				return 0;
-
-			if(endTime1 - startTime1 <= prehour){//关机开机时间在同一段时间，间隔不超过6h
-				diffTime = endTime1 - startTime1;
-				return diffTime;
-			}
-
-			while(startTime1 > end1){
-				start1 += ONE_DAY;
-				end1 += ONE_DAY;
-			}
-			while(endTime1 > end1){//
-				if(startTime1 > start1){
-					diffTime += end1 - startTime1;
-					Log.d(TAG,"diffTime0 = "+diffTime);
-				}else{
-					Date date = new Date(end1);
-					String datestr = df_str.format(date);
-					int status = -1;
-					Log.d(TAG,"datestr = "+datestr);
-					String querystr = String.format("select * from StartupShutdownlog where createTime > '%s'",datestr);//找出开始时间所在的时间段前的最后一个数据
-					Cursor cursor = StartupShutdownlog_db.rawQuery(querystr,null);
-					if(cursor != null && cursor.getCount() > 0){
-						Log.d(TAG,"cursor.getCount() = "+cursor.getCount());
-						if(cursor.moveToFirst()){
-							status = cursor.getInt(cursor.getColumnIndex("poweron"));
-							String time = cursor.getString(cursor.getColumnIndex("createTime"));
-							Log.d(TAG,"after end1 first time = "+time + "   status = "+status);
-							if(status == 1){//开机，说明之前是关机，所以无效数据
-								Log.d(TAG,"diffTime1 = "+diffTime);
-								diffTime+=prehour;
-							}
-						}
-					}else{
-						diffTime+=prehour;
-						Log.d(TAG,"diffTime2 = "+diffTime);
-					}
-				}
-				start1+=ONE_DAY;
-				end1+=ONE_DAY;
-				startTime1 = start1;
-			}
-			diffTime += endTime1-startTime1;
-			
-		} catch (ParseException e) {
-			e.printStackTrace();
-		}
-		Log.d(TAG,"diffTime = "+diffTime);
-		return diffTime;
-	}
 
-	public void insertDB(int power){
-		Log.d(TAG," power = "+power);
+	public void insertDB(int power,String time){
+		if(DEBUG) Log.d(TAG,"insertDB power = "+power);
+		
 		ContentValues cv = new ContentValues();
 		cv.put("power",power); //添加充电类型
+		if(time != null)
+			cv.put("createTime",time);
 		if(batterylog_db == null){
 			initBatterylogDB();
 		}
@@ -531,83 +397,71 @@ public final class PaxBatteryManagerService extends SystemService {
 	}
 
 	public int queryDB(int powered){
-    	Log.d(TAG,"queryDB");
+    	if(DEBUG) Log.d(TAG,"queryDB");
 		int nhour = 1;
 		int count = 0;
     	String equ = "=";
     	if(powered != 1){
 			equ = "!=";
 		}
+		String start_t = df.format(getBeforeDays(BatteryTermInfo.PREDICTED_DAYS,1));
+		String end_t = df.format(getBeforeDays(1,7));
+		Log.d(TAG,"start_t = "+start_t);
+		Log.d(TAG,"end_t = "+end_t);
 		String t1 = String.format("strftime('%%H','now','localtime','+%d hour')",nhour);
 		String t2 = String.format("strftime('%%H','now','localtime','+%d hour')",nhour+batteryTermInfo.getPredicted_hour());
 		String t3 = String.format("strftime('%%H','now','localtime','+%d hour')",batteryTermInfo.getPredicted_hour());
-		String querystr_test1 = String.format("select * from batterylog where power %s 1 and" +
+		String querystr_test1 = String.format("select * from batterylog where power %s 1 and createTime between '%s' and '%s' and" +
 						"( case when %s < %s" +
 						"then strftime('%%H', createTime) between %s and %s" +
 						"else strftime('%%H', createTime) not between %s and strftime('%%H','now','localtime')end );"
-				,equ,t1,t2,t1,t3, t2);
+				,equ,start_t,end_t,t1,t3,t1,t3, t2);
+		Log.d(TAG,"querystr_test1 = "+querystr_test1);
 		Cursor cursor = batterylog_db.rawQuery(querystr_test1,null);
 		if(cursor != null){
-			Log.d(TAG,"cursor count = "+cursor.getCount());
+			if(DEBUG) Log.d(TAG,"cursor count = "+cursor.getCount());
 			count = cursor.getCount();
 		}
 		cursor.close();
 		return count;
 	}
 
+
 	public void delDB(int days){
-    	Log.d(TAG,"delDB days= "+days);
+    	if(DEBUG) Log.d(TAG,"delDB days= "+days);
 		String str;
 		String str1;
 		String str3;
 		long count = 0;
         if(days > 0){
-			Log.d(TAG,"delDB days0= "+days);
-			str = String.format("delete from batterylog where date(createTime) < date('now','-%d day','localtime') " +
-					"or createTime > datetime('now','localtime');vacuum;",days);
+			if(DEBUG)Log.d(TAG,"delDB days0= "+days);
+			Date before7Days = getBeforeDays(BatteryTermInfo.PREDICTED_DAYS,0);
+			String before7Days_str = df.format(before7Days);
+			if(DEBUG)Log.d(TAG," before7Days_str= "+before7Days_str);
+			str = String.format("delete from batterylog where createTime < '%s' " +
+					"or createTime > datetime('now','localtime');vacuum;",before7Days_str);
 			batterylog_db.execSQL(str);
-
-
-			str1 = String.format("delete from StartupShutdownlog where date(createTime) < date('now','-%d day','localtime') " +
-								"or createTime > datetime('now','localtime');vacuum;",days);
-			str3 = "select count(*) FROM StartupShutdownlog;";
-			Cursor cursor = StartupShutdownlog_db.rawQuery(str3, null);
-			if(cursor.moveToFirst()){
-				count = cursor.getLong(0);
-			}
-			Log.d(TAG,"delDB count = "+count);
-			cursor.close();
-			if(count > 3){
-				StartupShutdownlog_db.execSQL(str1);
-			}
         }else if(days < 0){
 			File batterylogfile = new File("/data/system/batterylog.db");
-			File StartupShutdownlogfile = new File("/data/system/StartupShutdownlog.db");
             if(batterylogfile.isFile()&&batterylogfile.exists()){
                 batterylogfile.delete();
             }else {
                 Log.d(TAG,"batterylogfile is not exist");
-            }
-			if(StartupShutdownlogfile.isFile()&&StartupShutdownlogfile.exists()){
-                StartupShutdownlogfile.delete();
-            }else {
-                Log.d(TAG,"StartupShutdownlogfile is not exist");
             }
 			initBatterylogDB();
-			initStartupShutdownlogDB();
 			SystemProperties.set(ResetBMSDB,"0");
 		}
 	}
 
 	public void setAlarm(long period){
-    	Log.d(TAG,"setAlarm0 period= "+period);
+    	if(DEBUG) Log.d(TAG,"setAlarm0 period= "+period);
 		Intent intent = new Intent("paxbatteryAlarm.operation.null");
 		int rc = 0;
 		if(period == TIMEOUT_X_MIN){//30min
 			rc = 1;
 			intent = new Intent(broadcastCheck_Mode);
 		}else if(period == TIMEOUT_X_HOUR) {//24h
-			Log.d(TAG, "setAlarm0 delDB");
+			if(DEBUG) Log.d(TAG, "setAlarm0 delDB");
 			rc = 2;
 			intent = new Intent(broadcastDel_DB);
 		}else if(period == TIMEOUT_X_SEC){
@@ -615,9 +469,8 @@ public final class PaxBatteryManagerService extends SystemService {
 		}else if(period == TIMEOUT_1_MIN) {
 
 		}
-    	Log.d(TAG,"RC = "+rc);
+    	if(DEBUG)Log.d(TAG,"RC = "+rc);
 		PendingIntent pi = PendingIntent.getBroadcast(mContext,rc,intent,PendingIntent.FLAG_UPDATE_CURRENT);
-		//am.setExact(AlarmManager.RTC_WAKEUP,System.currentTimeMillis()+period,pi);
 		am.setAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,System.currentTimeMillis()+period,pi);
 	}
 
@@ -625,17 +478,22 @@ public final class PaxBatteryManagerService extends SystemService {
 		@Override
 		public void onReceive(Context context, Intent intent) {
 			String action =intent.getAction();
-			//Message msg = Message.obtain(); // 实例化消息对象，
+			if(DEBUG)Log.d(TAG,"onReceive action = "+action);
 			if(Intent.ACTION_BATTERY_CHANGED.equals(action)) {//每次收到广播记录下时间
 				int status=intent.getIntExtra("status", BatteryManager.BATTERY_STATUS_UNKNOWN);
 				int currLevel=intent.getIntExtra(BatteryManager.EXTRA_LEVEL,0);
 				int total=intent.getIntExtra(BatteryManager.EXTRA_SCALE,1);
 				int PLUG =intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
 				mBatteryLevel=currLevel*100/total;//计算电量
-				//Log.d(TAG,"status = "+status);
-				//Log.d(TAG,"currLevel = "+currLevel);
-				//Log.d(TAG,"percent = "+mBatteryLevel);
 				int flag = 0;
+				int Tem_full_charge = SystemProperties.getInt(TemporaryFullCharge,0);
+				if(DEBUG)Log.d(TAG,"onReceive Tem_full_charge = "+Tem_full_charge);
+				if(PLUG > 0 && Tem_full_charge!=0){
+					if(mBatteryLevel >= Tem_full_charge){
+						setChargeState(DISCHARGE);
+						return;
+					}
+				}
 				if(status==BatteryManager.BATTERY_STATUS_CHARGING)
 				{
 					chargeState = CHARGEING;
@@ -645,69 +503,86 @@ public final class PaxBatteryManagerService extends SystemService {
 					chargeState = DISCHARGE;
 				}
 				initcurMode = getInitcurMode();
-				if(initcurMode != batteryTermInfo.getCurmode()){
+				if(DEBUG) Log.d(TAG,"chargeState = "+chargeState);
+				if(DEBUG) Log.d(TAG,"getInitcurMode = "+initcurMode);
+				if(DEBUG) Log.d(TAG,"batteryTermInfo.getCurmode() = "+batteryTermInfo.getCurmode());
+				if(DEBUG) Log.d(TAG,"mBatteryLevel = "+mBatteryLevel);
+				if(initcurMode !=0 && initcurMode != batteryTermInfo.getCurmode()){
 					batteryTermInfo.setCurmode(initcurMode);
 				}
-				Log.d(TAG,"batteryTermInfo.getFullcharge() = "+batteryTermInfo.getFullcharge());
-				Log.d(TAG,"batteryTermInfo.getRecharge() = "+batteryTermInfo.getRecharge());
+				if(DEBUG) Log.d(TAG,"batteryTermInfo.getFullcharge() = "+batteryTermInfo.getFullcharge());
+				if(DEBUG) Log.d(TAG,"batteryTermInfo.getRecharge() = "+batteryTermInfo.getRecharge());
 				if(PLUG > 0 && mBatteryLevel >= batteryTermInfo.getFullcharge() && chargeState == CHARGEING  ){
 					Log.d(TAG,"discharge");
 					setChargeState(DISCHARGE);
 					chargeState = DISCHARGE;
 					flag = 1;
 				}else if(PLUG > 0 && mBatteryLevel <= batteryTermInfo.getRecharge() && chargeState == DISCHARGE){
-					Log.d(TAG,"chargeing");
+					if(DEBUG)Log.d(TAG,"chargeing");
 					setChargeState(CHARGEING);
 					chargeState = CHARGEING;
 					flag = 1;
 				}
+				
+				if(PLUG > 0 && mBatteryLevel > batteryTermInfo.getFullcharge() && powerState == 1){
+					if(DEBUG)Log.d(TAG,"disablePowerPath");
+					paxBmsManager.disablePowerPath();
+					powerState = 0;
+				}else if(PLUG > 0 && mBatteryLevel <= batteryTermInfo.getFullcharge()&& powerState == 0){
+					if(DEBUG)Log.d(TAG,"enablePowerPath");
+					paxBmsManager.enablePowerPath();
+					powerState = 1;
+				}
+
 				if(flag == 0 && chargeState == CHARGEING || PLUG == 0 ){//当机器充电状态或不接充电线，WhynotCharingFile都应该写null
-					writeWhynotCharingFile(CHARGEING);
+					//writeWhynotCharingFile(CHARGEING);
 				}
 			} else if(broadcastCheck_Mode.equals(action)) {
-				Log.d(TAG, "onReceive checkMode");
+				if(DEBUG)Log.d(TAG, "onReceive checkMode");
 				cancelAlarm(broadcastCheck_Mode);
 				checkMode();
 				setAlarm(TIMEOUT_X_MIN);
 			} else if(broadcastDel_DB.equals(action)){
-				Log.d(TAG,"onReceive delDB");
+				if(DEBUG)Log.d(TAG,"onReceive delDB");
 				cancelAlarm(broadcastDel_DB);
 				delDB(batteryTermInfo.getSaveDays());
 				setAlarm(TIMEOUT_X_HOUR);
-			}else if(Intent.ACTION_BOOT_COMPLETED.equals(action)){
-				Log.d(TAG,"ACTION_BOOT_COMPLETED");
-				String shutdown_time = SystemProperties.get(Shutdown_time,"");
-				if(shutdown_time != null && !shutdown_time.isEmpty()){
-					Log.d(TAG,"record ACTION_SHUTDOWN");
-					insertShartupShutDownDB(poweroff,shutdown_time);
-					SystemProperties.set(Shutdown_time,"");
-				}
-				insertShartupShutDownDB(poweron,null);
-
+			}else if(Intent.ACTION_BOOT_COMPLETED.equals(action) ){
+				Boot_flag = 1;
 			}else if(Intent.ACTION_SHUTDOWN.equals(action)){
-				Log.d(TAG,"ACTION_SHUTDOWN");
+				if(DEBUG)Log.d(TAG,"ACTION_SHUTDOWN");
 				SimpleDateFormat formatte = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");     
   				Date curDate = new Date(System.currentTimeMillis());
 				String time = formatte.format(curDate); 
 				SystemProperties.set(Shutdown_time,time);
+				//cancelAlarm(broadcastDel_DB);
 				Log.d(TAG,"record ACTION_SHUTDOWN time = "+time);
-				//insertShartupShutDownDB(poweroff);
+			}else if(broadcast_AUTO.equals(action)){
+				if(DEBUG)Log.d(TAG,"broadcast_AUTO");
+				Change_Automode_flag = 1;
 			}
 		}
 	}
 
+	public int setChargeState(int state){
+        try {
+            Log.d(TAG,"setChargeState: "+state);
+            if(state == CHARGEING){
+                paxBmsManager.enableCharge();
+            }else{
+                paxBmsManager.disableCharge();
+            }
+			//writeWhynotCharingFile(state);
+            if(DEBUG)Log.d(TAG,"setChargeState over");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
 	public void writeWhynotCharingFile(int state){
 		try {
-			
-			File reason_file = new File(disable_charge_reason);
-			if(!reason_file.exists()){
-				File dir  = new File("data/system/tmp/");
-				if(!dir.exists()){
-					dir.mkdirs();
-				}
-				reason_file.createNewFile();
-			}
-            FileOutputStream reason_out = new FileOutputStream(reason_file);
+            FileOutputStream reason_out = new FileOutputStream(disable_charge_reason);
             if(state == 0){
                 reason_out.write("RECHARGE MECHANISM\0".getBytes());
             }else{
@@ -719,19 +594,6 @@ public final class PaxBatteryManagerService extends SystemService {
         }
 	}
 
-	public void insertShartupShutDownDB(int on,String time){
-		Log.d(TAG," power = "+power);
-		ContentValues cv = new ContentValues();
-		cv.put("poweron",on);//添加机器状态：开机或者关机
-		if(null != time  && !time.isEmpty() ){
-			cv.put("createTime",time);
-		} 
-		if(StartupShutdownlog_db==null){
-			initStartupShutdownlogDB();
-		}
-		StartupShutdownlog_db.insert("StartupShutdownlog",null,cv);//执行插入操作
-	}
-
 	public void cancelAlarm(String broadcast_Str){
 		Intent intent = new Intent("paxbatteryAlarm.operation.null");
 		int rc = -1;
@@ -747,4 +609,15 @@ public final class PaxBatteryManagerService extends SystemService {
 		am.cancel(pi);
 		Log.d(TAG, "关闭了提醒");
 	}
+
+
+    /**
+     * Place a new service into the service manager.
+     * @param name the name of the new service
+     * @param service the service object
+     */
+    public void addService(String name, IBinder service) {
+        if(DEBUG)Log.d(TAG, "addService "+name);
+        ServiceManager.addService(name, service);
+    }
 }
diff --git a/frameworks/base/services/core/java/com/pax/util/OsPaxApiInternal.java b/frameworks/base/services/core/java/com/pax/util/OsPaxApiInternal.java
new file mode 100755
index 00000000000..d9c3a35d14a
--- /dev/null
+++ b/frameworks/base/services/core/java/com/pax/util/OsPaxApiInternal.java
@@ -0,0 +1,119 @@
+package com.pax.util;
+
+import java.io.IOException;
+import java.util.Calendar;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+import java.util.TimeZone;
+
+import android.util.Log;
+
+public class OsPaxApiInternal {
+
+    private static final String TAG = OsPaxApiInternal.class.getSimpleName();
+
+    public static boolean setSpTime(String tz) {
+
+        try {
+
+            long when = timeZoneToMillis(tz);
+            if ((when / 1000) >= Integer.MAX_VALUE) {
+                return false;
+            }
+            Calendar c = Calendar.getInstance();
+            c.setTimeInMillis(when);
+            int year = (c.get(Calendar.YEAR));
+            int month = c.get(Calendar.MONTH);
+            int day = c.get(Calendar.DATE);
+            int hourOfDay = c.get(Calendar.HOUR_OF_DAY);
+            int minute = c.get(Calendar.MINUTE);
+            int second = c.get(Calendar.SECOND);
+            Log.w(TAG, "year = " + year + " month=" + month + "  day=" + day + "  hour=" + hourOfDay + "  minute=" + minute + "   second=" + second);
+            byte[] timeSet = { (byte) 0x10, 0x12, 0x31, 0x59, 0x59, 0x59, 0x00, 0x00 };
+
+            timeSet[0] = (byte) Integer.parseInt(Integer.toString(year % 100), 16);
+            timeSet[1] = (byte) Integer.parseInt(Integer.toString(month + 1), 16);
+            timeSet[2] = (byte) Integer.parseInt(Integer.toString(day), 16);
+            timeSet[3] = (byte) Integer.parseInt(Integer.toString(hourOfDay), 16);
+            timeSet[4] = (byte) Integer.parseInt(Integer.toString(minute), 16);
+            timeSet[5] = (byte) Integer.parseInt(Integer.toString(second), 16);
+
+            // get sp time
+            long tmpTime = getSpTime();
+            if ((tmpTime - when) / 1000 == 0) {
+                return true;
+            }
+            byte result = SetTimeSP(timeSet);
+            Log.w(TAG, "setSpTime result = " + result);
+            return result == 0;
+        } catch (Exception e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return false;
+    }
+
+    public static long getSpTime() {
+        long timeMillis = -1;
+        byte[] tmpTime = new byte[7];
+        int[] time = new int[7];
+        try {
+            GetTime(tmpTime);
+            for (int i = 0; i < tmpTime.length; i++) {
+                time[i] = bcdToInt(tmpTime[i]);
+                // Log.w(TAG,"time="+time[i]);
+            }
+            int year = time[0];
+            if (year < 50)
+                year += 2000;
+            else
+                year += 1900;
+            Calendar calendar = Calendar.getInstance();
+            calendar.set(year, time[1] - 1, time[2], time[3], time[4], time[5]);
+            timeMillis = calendar.getTimeInMillis();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return timeMillis;
+    }
+
+    public static long timeZoneToMillis(String tz) {
+        try {
+            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+            Date date = new Date();
+            String oldStrDate = df.format(date);
+            Log.w(TAG, "current timezone: " + df.getTimeZone().getID() + " , " + oldStrDate);
+
+            df.setTimeZone(TimeZone.getTimeZone(tz));
+            String newStrDate = df.format(date);
+            Log.w(TAG, "new timezone: " + df.getTimeZone().getID() + " , " + newStrDate);
+
+            SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+            Date date2 = df2.parse(newStrDate);
+            long newTimeMills = date2.getTime();
+            Log.w(TAG, "getTimeInMillis = " + newTimeMills);
+            return newTimeMills;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return Integer.MAX_VALUE;
+    }
+
+    private static int bcdToInt(byte value) {
+        int highBit = value >> 4 & 0x0f;
+        int lowBit = value & 0x0f;
+        return highBit * 10 + lowBit;
+    }
+
+    public static native byte SetTimeSP(byte[] time) throws IOException;
+
+    public static native void GetTime(byte[] time) throws IOException;
+
+    static {
+        System.loadLibrary("paxapiinternaljni");
+    }
+}
diff --git a/frameworks/base/services/core/jni/Android.bp b/frameworks/base/services/core/jni/Android.bp
old mode 100644
new mode 100755
index 925ad0f57f1..18d92210478
--- a/frameworks/base/services/core/jni/Android.bp
+++ b/frameworks/base/services/core/jni/Android.bp
@@ -59,6 +59,9 @@ cc_library_static {
         "com_android_server_am_CachedAppOptimizer.cpp",
         "com_android_server_am_LowMemDetector.cpp",
         "com_android_server_pm_PackageManagerShellCommandDataLoader.cpp",
+        //ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/09/1
+        "com_android_server_paxbms_PaxBmsService.cpp",
+        //ADD END by shanliangliang@paxsz.com add for BMS, 2021/09/1
         "onload.cpp",
         ":lib_networkStatsFactory_native",
     ],
@@ -166,6 +169,9 @@ cc_defaults {
         "android.system.suspend@1.0",
         "service.incremental",
         "suspend_control_aidl_interface-cpp",
+		//ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/07/12
+         "android.hardware.pax_bms@1.0",
+        //ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
     ],
 
     static_libs: [
diff --git a/frameworks/base/services/core/jni/com_android_server_paxbms_PaxBmsService.cpp b/frameworks/base/services/core/jni/com_android_server_paxbms_PaxBmsService.cpp
new file mode 100755
index 00000000000..a30254a474a
--- /dev/null
+++ b/frameworks/base/services/core/jni/com_android_server_paxbms_PaxBmsService.cpp
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "PaxBMSService"
+
+#include "jni.h"
+#include <nativehelper/JNIHelp.h>
+#include "android_runtime/AndroidRuntime.h"
+
+#include <android/hardware/pax_bms/1.0/IPaxBMS.h>
+#include <android/hardware/pax_bms/1.0/types.h>
+#include <android-base/chrono_utils.h>
+#include <utils/misc.h>
+#include <utils/Log.h>
+#include <map>
+#include <stdio.h>
+
+namespace android {
+
+using IPaxBMS = ::android::hardware::pax_bms::V1_0::IPaxBMS;
+template<typename T>
+using Return     = ::android::hardware::Return<T>;
+
+static void enableCharge_native (
+        JNIEnv* /* env */,
+        jobject /* clazz */,
+        jint mode) {
+
+        sp<IPaxBMS> hal = IPaxBMS::getService();
+
+        if (hal == nullptr) {
+			ALOGE("hal == nullptr.\n");
+			return;
+		}
+
+		Return<int32_t> ret = hal->EnableCharge();
+		if (ret != 0) {
+			ALOGE("set EnableCharge failed.\n");
+		}
+}
+
+static void disableCharge_native(
+        JNIEnv* /* env */,
+        jobject /* clazz */
+        ) {
+
+        sp<IPaxBMS> hal = IPaxBMS::getService();
+
+        if (hal == nullptr) {
+			ALOGE("disableCharge_native hal == nullptr .\n");
+			return;
+		}
+
+		Return<int32_t> ret = hal->DisableCharge();
+		if (ret != 0) {
+			ALOGE("set DisableCharge failed.\n");
+		}
+}
+static void enablePowerPath_native(
+        JNIEnv* /* env */,
+        jobject /* clazz */
+        ) {
+
+        sp<IPaxBMS> hal = IPaxBMS::getService();
+
+        if (hal == nullptr) {
+			ALOGE("EnablePowerPath_native hal == nullptr .\n");
+			return;
+		}
+
+		Return<int32_t> ret = hal->EnablePowerPath();
+		if (ret != 0) {
+			ALOGE("set EnablePowerPath failed.\n");
+		}
+}
+
+static void disablePowerPath_native(
+        JNIEnv* /* env */,
+        jobject /* clazz */
+        ) {
+
+        sp<IPaxBMS> hal = IPaxBMS::getService();
+
+        if (hal == nullptr) {
+			ALOGE("DisablePowerPath_native hal == nullptr .\n");
+			return;
+		}
+
+		Return<int32_t> ret = hal->DisablePowerPath();
+		if (ret != 0) {
+			ALOGE("set DisablePowerPath failed.\n");
+		}
+}
+
+static const JNINativeMethod method_table[] = {
+    { "enableCharge_native", "()V", (void*)enableCharge_native },
+    { "disableCharge_native", "()V", (void*)disableCharge_native },
+    { "enablePowerPath_native", "()V", (void*)enablePowerPath_native },
+    { "disablePowerPath_native", "()V", (void*)disablePowerPath_native },
+};
+
+int register_android_server_paxbms_PaxBmsService(JNIEnv *env) {
+	ALOGE("register_android_server_paxbms_PaxBmsService\n");
+    return jniRegisterNativeMethods(env, "com/android/server/paxbms/PaxBmsService",
+            method_table, NELEM(method_table));
+}
+
+};
diff --git a/frameworks/base/services/core/jni/onload.cpp b/frameworks/base/services/core/jni/onload.cpp
index e5d2a83479e..0d0f56ed587 100644
--- a/frameworks/base/services/core/jni/onload.cpp
+++ b/frameworks/base/services/core/jni/onload.cpp
@@ -64,6 +64,9 @@ int register_android_server_com_android_server_pm_PackageManagerShellCommandData
 int register_android_server_stats_pull_StatsPullAtomService(JNIEnv* env);
 int register_android_server_AdbDebuggingManager(JNIEnv* env);
 int register_android_server_GpuService(JNIEnv* env);
+//ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/07/12
+int register_android_server_paxbms_PaxBmsService(JNIEnv* env);
+//ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
 };
 
 using namespace android;
@@ -121,5 +124,6 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* /* reserved */)
     register_android_server_stats_pull_StatsPullAtomService(env);
     register_android_server_AdbDebuggingManager(env);
     register_android_server_GpuService(env);
+	register_android_server_paxbms_PaxBmsService(env);
     return JNI_VERSION_1_4;
 }
diff --git a/frameworks/base/services/java/com/android/server/SystemServer.java b/frameworks/base/services/java/com/android/server/SystemServer.java
index 949742c1a33..688074198e7 100755
--- a/frameworks/base/services/java/com/android/server/SystemServer.java
+++ b/frameworks/base/services/java/com/android/server/SystemServer.java
@@ -198,6 +198,11 @@ import java.util.Locale;
 import java.util.Timer;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
+//ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/07/12
+import com.android.server.paxbms.PaxBmsService;
+//ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
+import com.pax.server.PaxBatteryManagerService;
+
 
 public final class SystemServer {
 
@@ -1291,6 +1296,16 @@ public final class SystemServer {
             t.traceBegin("AppIntegrityService");
             mSystemServiceManager.startService(AppIntegrityManagerService.class);
             t.traceEnd();
+			//ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/07/12
+             t.traceBegin("StartmPaxBMSService");
+            try{
+                PaxBmsService mPaxBmsService = new PaxBmsService(context);
+                ServiceManager.addService("paxbms", mPaxBmsService);
+            } catch(Throwable e){
+                reportWtf("starting paxbms Service", e);
+            }
+            t.traceEnd();
+		//ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
 
         } catch (Throwable e) {
             Slog.e("System", "******************************************");
@@ -2292,6 +2307,15 @@ public final class SystemServer {
         //[FEATURE]-Add-BEGIN by (songzh@paxsz.com), 2021/5/13, for start pax service
         startPaxOtherServices();
         //[FEATURE]-Add-END by (songzh@paxsz.com), 2021/5/13, for start pax service
+		//[FEATURE]-Add-BEGIN by (tangyunhua@paxsz.com), 2021/06/26, for start pax Battery Manager service
+
+		if(!SystemProperties.get("ro.product.vendor.model").equals("M50")){
+			t.traceBegin("PaxBatteryManagerService ");
+			mSystemServiceManager.startService(PaxBatteryManagerService.class);
+			t.traceEnd();
+		}
+		
+		//[FEATURE]-Add-END by (tangyunhua@paxsz.com), 2020/06/26, for start pax Battery Manager service
 
         // These are needed to propagate to the runnable below.
         final NetworkManagementService networkManagementF = networkManagement;
diff --git a/system/sepolicy/prebuilts/api/30.0/private/compat/29.0/29.0.ignore.cil b/system/sepolicy/prebuilts/api/30.0/private/compat/29.0/29.0.ignore.cil
index bab76d21fbf..ffbf0178551 100755
--- a/system/sepolicy/prebuilts/api/30.0/private/compat/29.0/29.0.ignore.cil
+++ b/system/sepolicy/prebuilts/api/30.0/private/compat/29.0/29.0.ignore.cil
@@ -45,6 +45,7 @@
     device_config_window_manager_native_boot_prop
     device_config_configuration_prop
     emergency_affordance_service
+	paxbms_service
     exported_camera_prop
     fastbootd_protocol_prop
     file_integrity_service
diff --git a/system/sepolicy/prebuilts/api/30.0/private/service_contexts b/system/sepolicy/prebuilts/api/30.0/private/service_contexts
index 5c6f1a47660..e95ce579861 100644
--- a/system/sepolicy/prebuilts/api/30.0/private/service_contexts
+++ b/system/sepolicy/prebuilts/api/30.0/private/service_contexts
@@ -247,4 +247,5 @@ wifinl80211                               u:object_r:wifinl80211_service:s0
 wifiaware                                 u:object_r:wifiaware_service:s0
 wifirtt                                   u:object_r:rttmanager_service:s0
 window                                    u:object_r:window_service:s0
+paxbms                                    u:object_r:paxbms_service:s0
 *                                         u:object_r:default_android_service:s0
diff --git a/system/sepolicy/prebuilts/api/30.0/public/service.te b/system/sepolicy/prebuilts/api/30.0/public/service.te
index f27772eabb9..203ff4e165b 100644
--- a/system/sepolicy/prebuilts/api/30.0/public/service.te
+++ b/system/sepolicy/prebuilts/api/30.0/public/service.te
@@ -205,6 +205,7 @@ type inputflinger_service, system_api_service, system_server_service, service_ma
 type wpantund_service, system_api_service, service_manager_type;
 type tethering_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
 type emergency_affordance_service, system_server_service, service_manager_type;
+type paxbms_service, system_api_service, system_server_service, service_manager_type;
 
 ###
 ### HAL Services
diff --git a/system/sepolicy/private/compat/29.0/29.0.ignore.cil b/system/sepolicy/private/compat/29.0/29.0.ignore.cil
index bab76d21fbf..ffbf0178551 100755
--- a/system/sepolicy/private/compat/29.0/29.0.ignore.cil
+++ b/system/sepolicy/private/compat/29.0/29.0.ignore.cil
@@ -45,6 +45,7 @@
     device_config_window_manager_native_boot_prop
     device_config_configuration_prop
     emergency_affordance_service
+	paxbms_service
     exported_camera_prop
     fastbootd_protocol_prop
     file_integrity_service
diff --git a/system/sepolicy/private/service_contexts b/system/sepolicy/private/service_contexts
index 5c6f1a47660..e95ce579861 100644
--- a/system/sepolicy/private/service_contexts
+++ b/system/sepolicy/private/service_contexts
@@ -247,4 +247,5 @@ wifinl80211                               u:object_r:wifinl80211_service:s0
 wifiaware                                 u:object_r:wifiaware_service:s0
 wifirtt                                   u:object_r:rttmanager_service:s0
 window                                    u:object_r:window_service:s0
+paxbms                                    u:object_r:paxbms_service:s0
 *                                         u:object_r:default_android_service:s0
diff --git a/system/sepolicy/public/service.te b/system/sepolicy/public/service.te
index f27772eabb9..203ff4e165b 100644
--- a/system/sepolicy/public/service.te
+++ b/system/sepolicy/public/service.te
@@ -205,6 +205,7 @@ type inputflinger_service, system_api_service, system_server_service, service_ma
 type wpantund_service, system_api_service, service_manager_type;
 type tethering_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
 type emergency_affordance_service, system_server_service, service_manager_type;
+type paxbms_service, system_api_service, system_server_service, service_manager_type;
 
 ###
 ### HAL Services
diff --git a/vendor/mediatek/proprietary/packages/apps/MtkSettings/res_ext/values/mtk_arrays.xml b/vendor/mediatek/proprietary/packages/apps/MtkSettings/res_ext/values/mtk_arrays.xml
index 2edd9366e94..ee8ab787268 100755
--- a/vendor/mediatek/proprietary/packages/apps/MtkSettings/res_ext/values/mtk_arrays.xml
+++ b/vendor/mediatek/proprietary/packages/apps/MtkSettings/res_ext/values/mtk_arrays.xml
@@ -232,9 +232,9 @@
 
     <!-- [FEATURE]-Add-BEGIN by (qumy@paxsz.com), 2021/05/08 for add chargemode -->
     <string-array name="charge_mode_entries">
-        <item>AUTO_MODE</item>
-        <item>MOBILE_MODE</item>
-        <item>COUNTER_TOP_MODE</item>
+		<item>Auto mode</item>
+        <item>Mobile mode</item>
+        <item>Countertop mode</item>
     </string-array>
 
     <string-array name="charge_mode_entries_value" translatable="false">
-- 
2.17.1

