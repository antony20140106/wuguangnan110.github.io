From 567bd66040e450f514576ab1f081ecb192278918 Mon Sep 17 00:00:00 2001
From: huling <huling@paxsz.com>
Date: Wed, 8 Jun 2022 07:36:27 +0000
Subject: [PATCH] =?UTF-8?q?[Title]:framework=E5=92=8C=E5=BA=94=E7=94=A8?=
 =?UTF-8?q?=E6=94=AF=E6=8C=81=E5=8D=95=E5=87=BB=E5=94=A4=E9=86=92=E6=89=8B?=
 =?UTF-8?q?=E5=8A=BF=E5=BC=80=E5=85=B3=E6=8E=A7=E5=88=B6?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

[Summary]:
	1.新增paxGestureManager和paxGestureService，通过jni调用和驱动ioctl,实现对tp驱动单击唤醒功能开关的控制
	2.新增paxGestureService和/dev/pax_tp的selinux权限

[Test Plan]:
	1.测试Settings->System->Gesture->Single Tap To Wake Up功能控制是否正常

[Module]:System

[Model]:A3700

[author]:huling@paxsz.com

[date]:2022-6-8
---
 .../rc_file/init.mt6762.A3700_V01_V01.rc      |  2 +
 .../rc_file/init.mt6762.A3700_V02_V03.rc      |  2 +
 .../k62v1_64_pax/sepolicy/vendor/file.te      |  1 +
 .../sepolicy/vendor/file_contexts             |  2 +
 .../sepolicy/vendor/pax_gesture_service.te    |  1 +
 .../sepolicy/vendor/system_server.te          |  2 +
 frameworks/base/api/current.txt               |  1 +
 .../android/app/SystemServiceRegistry.java    | 13 +++
 .../core/java/android/content/Context.java    |  1 +
 .../com/pax/gesture/IPaxGestureManager.aidl   | 24 ++++++
 .../com/pax/gesture/PaxGestureManager.java    | 48 +++++++++++
 frameworks/base/non-updatable-api/current.txt |  1 +
 .../server/paxgesture/PaxGestureService.java  | 77 +++++++++++++++++
 frameworks/base/services/core/jni/Android.bp  |  1 +
 ...id_server_paxgesture_PaxGestureService.cpp | 82 +++++++++++++++++++
 frameworks/base/services/core/jni/onload.cpp  |  6 ++
 .../java/com/android/server/SystemServer.java | 13 ++-
 .../mediatek/chsc5xxx/semi_touch_device.c     | 42 +++-------
 .../apps/MtkSettings/res/values/strings.xml   |  4 +-
 ...leTapAwakeGesturePreferenceController.java |  5 ++
 20 files changed, 295 insertions(+), 33 deletions(-)
 create mode 100755 device/mediateksample/k62v1_64_pax/sepolicy/vendor/pax_gesture_service.te
 create mode 100755 frameworks/base/core/java/com/pax/gesture/IPaxGestureManager.aidl
 create mode 100755 frameworks/base/core/java/com/pax/gesture/PaxGestureManager.java
 create mode 100755 frameworks/base/services/core/java/com/android/server/paxgesture/PaxGestureService.java
 create mode 100755 frameworks/base/services/core/jni/com_android_server_paxgesture_PaxGestureService.cpp
 mode change 100644 => 100755 frameworks/base/services/core/jni/onload.cpp

diff --git a/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V01_V01.rc b/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V01_V01.rc
index 2fe5aa870bb..0809db36ac5 100755
--- a/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V01_V01.rc
+++ b/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V01_V01.rc
@@ -64,6 +64,8 @@ on property:sys.boot_completed=1
 on fs
 
 on boot
+	chmod 0777 /dev/pax_tp
+	chown system system /dev/pax_tp
 
 service tpver /system/bin/tpver
 	user root
diff --git a/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V02_V03.rc b/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V02_V03.rc
index c82bcd44833..500c38dd99f 100755
--- a/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V02_V03.rc
+++ b/device/mediateksample/k62v1_64_pax/rc_file/init.mt6762.A3700_V02_V03.rc
@@ -63,6 +63,8 @@ on property:sys.boot_completed=1
 on fs
 
 on boot
+	chmod 0777 /dev/pax_tp
+	chown system system /dev/pax_tp
 
 service tpver /system/bin/tpver
 	user root
diff --git a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file.te b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file.te
index c5b33ff9971..8662ec6b529 100755
--- a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file.te
+++ b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file.te
@@ -1,6 +1,7 @@
 #add by paxsz
 type pax_sysfs, fs_type, sysfs_type;
 type logger_file, file_type;
+type pax_gesture_device, dev_type, mlstrustedobject;
 #type resource_file, file_type, data_file_type;
 #type pax_sp_file, file_type, data_file_type, core_data_file_type;
 
diff --git a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file_contexts b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file_contexts
index 34c8c3d8717..846b3921487 100755
--- a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file_contexts
+++ b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/file_contexts
@@ -13,5 +13,7 @@
 
 /dev/ttyGS*                     u:object_r:ttyGS_device:s0
 
+/dev/pax_tp						u:object_r:pax_gesture_device:s0
+
 # for get tp version
 /system/bin/tpver               u:object_r:tp_ver_default_exec:s0
diff --git a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/pax_gesture_service.te b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/pax_gesture_service.te
new file mode 100755
index 00000000000..1a7dfcda9c4
--- /dev/null
+++ b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/pax_gesture_service.te
@@ -0,0 +1 @@
+type pax_gesture_service,     app_api_service, system_server_service, service_manager_type;
diff --git a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/system_server.te b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/system_server.te
index b3f1e3855c6..098572850e4 100755
--- a/device/mediateksample/k62v1_64_pax/sepolicy/vendor/system_server.te
+++ b/device/mediateksample/k62v1_64_pax/sepolicy/vendor/system_server.te
@@ -34,6 +34,8 @@ allow system_server paxdroid_share_file:dir { getattr };
 allow system_server PaxApiService_service:service_manager { find };
 allow system_server default_android_hwservice:hwservice_manager { find };
 allow system_server hal_pax_bms:binder { call };
+allow system_server pax_gesture_service:service_manager { find add };
+allow system_server pax_gesture_device:chr_file { ioctl read open write };
 allow system_server auth_bpadownload:binder { call };
 
 allow system_server su:fd { use };
diff --git a/frameworks/base/api/current.txt b/frameworks/base/api/current.txt
index 2938d9ef94d..cd025965bf4 100755
--- a/frameworks/base/api/current.txt
+++ b/frameworks/base/api/current.txt
@@ -10226,6 +10226,7 @@ package android.content {
     field public static final String NOTIFICATION_SERVICE = "notification";
     field public static final String NSD_SERVICE = "servicediscovery";
     field public static final String PAXBMS_SERVICE = "paxbms";
+    field public static final String PAX_GESTURE_SERVICE = "pax_gesture";
     field public static final String POWER_SERVICE = "power";
     field public static final String PRINT_SERVICE = "print";
     field public static final int RECEIVER_VISIBLE_TO_INSTANT_APPS = 1; // 0x1
diff --git a/frameworks/base/core/java/android/app/SystemServiceRegistry.java b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
index 193542f9ef9..9f578cd1d8a 100755
--- a/frameworks/base/core/java/android/app/SystemServiceRegistry.java
+++ b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
@@ -222,6 +222,8 @@ import java.util.Objects;
 import android.os.IPaxBms;
 import android.app.PaxBmsManager;
 
+import com.pax.gesture.PaxGestureManager;
+import com.pax.gesture.IPaxGestureManager;
 /**
  * Manages all of the system services that can be returned by {@link Context#getSystemService}.
  * Used by {@link ContextImpl}.
@@ -1373,6 +1375,17 @@ public final class SystemServiceRegistry {
                         return PaxBmsManager.getInstance();
                     }});
 
+		//[FEATURE]-Add-BEGIN by huling@paxsz.com 2022-6-7, for pax gesture service
+		registerService(Context.PAX_GESTURE_SERVICE, PaxGestureManager.class,
+                new CachedServiceFetcher<PaxGestureManager>() {
+					@Override
+					public PaxGestureManager createService(ContextImpl ctx) throws ServiceNotFoundException {
+						IBinder b = ServiceManager.getServiceOrThrow(Context.PAX_GESTURE_SERVICE);
+						IPaxGestureManager service = IPaxGestureManager.Stub.asInterface(b);
+						return new PaxGestureManager(service, ctx);
+					}});
+		//[FEATURE]-Add-END by huling@paxsz.com 2022-6-7, for pax gesture service
+
         sInitializing = true;
         try {
             // Note: the following functions need to be @SystemApis, once they become mainline
diff --git a/frameworks/base/core/java/android/content/Context.java b/frameworks/base/core/java/android/content/Context.java
index 190f30c9383..106be5734e1 100755
--- a/frameworks/base/core/java/android/content/Context.java
+++ b/frameworks/base/core/java/android/content/Context.java
@@ -5088,6 +5088,7 @@ public abstract class Context {
 
 	public static final String PAXBMS_SERVICE="paxbms";
 
+	public static final String PAX_GESTURE_SERVICE = "pax_gesture";
     /**
      * Use with {@link #getSystemService(String)} to retrieve a {@link
      * android.app.blob.BlobStoreManager} for contributing and accessing data blobs
diff --git a/frameworks/base/core/java/com/pax/gesture/IPaxGestureManager.aidl b/frameworks/base/core/java/com/pax/gesture/IPaxGestureManager.aidl
new file mode 100755
index 00000000000..16b83fdca78
--- /dev/null
+++ b/frameworks/base/core/java/com/pax/gesture/IPaxGestureManager.aidl
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.pax.gesture;
+
+/** @hide */
+interface IPaxGestureManager
+{
+    int openGesture();
+    int closeGesture();
+}
diff --git a/frameworks/base/core/java/com/pax/gesture/PaxGestureManager.java b/frameworks/base/core/java/com/pax/gesture/PaxGestureManager.java
new file mode 100755
index 00000000000..d22460a5e10
--- /dev/null
+++ b/frameworks/base/core/java/com/pax/gesture/PaxGestureManager.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.pax.gesture;
+
+import android.content.Context;
+import android.os.RemoteException;
+import android.annotation.NonNull;
+
+public class PaxGestureManager {
+	
+    private final IPaxGestureManager mService;
+    private final Context mContext;
+
+    public PaxGestureManager(IPaxGestureManager service, Context context) {
+        mService = service;
+        mContext = context;
+    }
+
+    public int openGesture() {
+        try {
+            return mService.openGesture();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    public int closeGesture() {
+        try {
+            return mService.closeGesture();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+}
\ No newline at end of file
diff --git a/frameworks/base/non-updatable-api/current.txt b/frameworks/base/non-updatable-api/current.txt
index 5aa2e7f62a3..ec298d51e70 100755
--- a/frameworks/base/non-updatable-api/current.txt
+++ b/frameworks/base/non-updatable-api/current.txt
@@ -10226,6 +10226,7 @@ package android.content {
     field public static final String NOTIFICATION_SERVICE = "notification";
     field public static final String NSD_SERVICE = "servicediscovery";
     field public static final String PAXBMS_SERVICE = "paxbms";
+    field public static final String PAX_GESTURE_SERVICE = "pax_gesture";
     field public static final String POWER_SERVICE = "power";
     field public static final String PRINT_SERVICE = "print";
     field public static final int RECEIVER_VISIBLE_TO_INSTANT_APPS = 1; // 0x1
diff --git a/frameworks/base/services/core/java/com/android/server/paxgesture/PaxGestureService.java b/frameworks/base/services/core/java/com/android/server/paxgesture/PaxGestureService.java
new file mode 100755
index 00000000000..5248789bd93
--- /dev/null
+++ b/frameworks/base/services/core/java/com/android/server/paxgesture/PaxGestureService.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.paxgesture;
+
+import android.content.Context;
+import com.pax.gesture.IPaxGestureManager;
+import android.os.SystemProperties;
+import android.content.BroadcastReceiver;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.util.Log;
+
+public class PaxGestureService extends IPaxGestureManager.Stub {
+	
+    private static final String TAG = "PaxGestureService";
+	public static final String GESTURE_PROPERTY = "persist.sys.ctrl.tp.gesture";
+    private Context mContext;
+	
+    private native int nativeOpenGesture();
+    private native int nativeCloseGesture();
+
+	PaxGestureReceiver mPaxGestureReceiver;
+
+    public PaxGestureService(Context context) {
+        mContext = context;
+		mPaxGestureReceiver = new PaxGestureReceiver();
+		mContext.registerReceiver(mPaxGestureReceiver, new IntentFilter(Intent.ACTION_BOOT_COMPLETED));
+    }
+
+    @Override
+    public int openGesture() {
+        Log.d(TAG, "PaxGestureService->openGesture");
+        return nativeOpenGesture();
+    }
+
+    @Override
+    public int closeGesture() {
+        Log.d(TAG, "PaxGestureService->closeGesture");
+        return nativeCloseGesture();
+    }
+	
+	class PaxGestureReceiver extends BroadcastReceiver{
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action =intent.getAction();
+			int isOpened = 0;
+			try{
+				isOpened = SystemProperties.getInt(GESTURE_PROPERTY, 0);
+			}catch (Exception e) {
+				e.printStackTrace();
+			}
+			if(Intent.ACTION_BOOT_COMPLETED.equals(action)) {
+				if(isOpened == 1) {
+					Log.d(TAG, "received ACTION_BOOT_COMPLETED, open gesture");
+					openGesture();
+				} else {
+					Log.d(TAG, "received ACTION_BOOT_COMPLETED, close gesture");
+					closeGesture();
+				}
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/frameworks/base/services/core/jni/Android.bp b/frameworks/base/services/core/jni/Android.bp
index 18d92210478..f59637241e4 100755
--- a/frameworks/base/services/core/jni/Android.bp
+++ b/frameworks/base/services/core/jni/Android.bp
@@ -62,6 +62,7 @@ cc_library_static {
         //ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/09/1
         "com_android_server_paxbms_PaxBmsService.cpp",
         //ADD END by shanliangliang@paxsz.com add for BMS, 2021/09/1
+		"com_android_server_paxgesture_PaxGestureService.cpp",
         "onload.cpp",
         ":lib_networkStatsFactory_native",
     ],
diff --git a/frameworks/base/services/core/jni/com_android_server_paxgesture_PaxGestureService.cpp b/frameworks/base/services/core/jni/com_android_server_paxgesture_PaxGestureService.cpp
new file mode 100755
index 00000000000..6213998d8aa
--- /dev/null
+++ b/frameworks/base/services/core/jni/com_android_server_paxgesture_PaxGestureService.cpp
@@ -0,0 +1,82 @@
+#define LOG_TAG "PaxGestureService"
+
+#include <nativehelper/JNIHelp.h>
+#include "jni.h"
+#include <utils/Log.h>
+#include <utils/misc.h>
+#include <utils/String8.h>
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/epoll.h>
+#include <sys/timerfd.h>
+#include <sys/types.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <unistd.h>
+#include <linux/ioctl.h>
+
+#include <array>
+#include <memory>
+
+#define GESTURE_DEV                "/dev/pax_tp"
+#define SET_GESTURE_OPEN           _IOW('b', 0, int)
+#define SET_GESTURE_CLOSE          _IOW('b', 1, int)
+
+namespace android {
+
+static jint android_server_paxgesture_PaxGestureService_nativeOpenGesture(JNIEnv* env, jobject obj)
+{
+    int fd;
+    int res;
+    fd = open(GESTURE_DEV, O_RDWR);
+    if (fd <0) {
+        ALOGE("Unable to open /dev/pax_tp");
+        return -1;
+    }
+    
+    res = ioctl(fd, SET_GESTURE_OPEN, NULL);
+    if (res < 0) {
+         ALOGE("ioctl->SET_GESTURE_OPEN failed:%d", res);
+         return res;
+    }
+    ALOGD("ioctl->SET_GESTURE_OPEN open gesture success");
+    close(fd);
+    return 0;
+}
+
+static jint android_server_paxgesture_PaxGestureService_nativeCloseGesture(JNIEnv* env, jobject obj)
+{
+    int fd;
+    int res;
+    fd = open(GESTURE_DEV, O_RDWR);
+    if (fd <0) {
+        ALOGE("Unable to open /dev/pax_tp");
+		return -1;
+    }
+    
+    res = ioctl(fd, SET_GESTURE_CLOSE, NULL);
+    if (res < 0) {
+         ALOGE("ioctl->SET_GESTURE_CLOSE failed:%d", res);
+		 return res;
+    }
+    ALOGD("ioctl->SET_GESTURE_CLOSE close gesture success");
+    close(fd);
+	return 0;
+}
+
+//add by huling@paxsz.com
+static const JNINativeMethod sPaxGestureMethods[] = {
+    /* name, signature, funcPtr */
+    {"nativeOpenGesture", "()I", (void*)android_server_paxgesture_PaxGestureService_nativeOpenGesture},
+    {"nativeCloseGesture", "()I", (void*)android_server_paxgesture_PaxGestureService_nativeCloseGesture},
+};
+ 
+int register_android_server_paxgesture_PaxGestureService(JNIEnv* env)
+{
+    return jniRegisterNativeMethods(env, "com/android/server/paxgesture/PaxGestureService",
+                                    sPaxGestureMethods, NELEM(sPaxGestureMethods));
+}
+
+}
\ No newline at end of file
diff --git a/frameworks/base/services/core/jni/onload.cpp b/frameworks/base/services/core/jni/onload.cpp
old mode 100644
new mode 100755
index 0d0f56ed587..1790dceaa34
--- a/frameworks/base/services/core/jni/onload.cpp
+++ b/frameworks/base/services/core/jni/onload.cpp
@@ -67,6 +67,9 @@ int register_android_server_GpuService(JNIEnv* env);
 //ADD BEGIN by shanliangliang@paxsz.com add for BMS, 2021/07/12
 int register_android_server_paxbms_PaxBmsService(JNIEnv* env);
 //ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
+//[FEATURE]-Add-BEGIN by huling@paxsz.com 2022-6-7, for pax gesture service
+int register_android_server_paxgesture_PaxGestureService(JNIEnv* env);
+//[FEATURE]-Add-END by huling@paxsz.com 2022-6-7, for pax gesture service
 };
 
 using namespace android;
@@ -125,5 +128,8 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* /* reserved */)
     register_android_server_AdbDebuggingManager(env);
     register_android_server_GpuService(env);
 	register_android_server_paxbms_PaxBmsService(env);
+	//[FEATURE]-Add-BEGIN by huling@paxsz.com 2022-6-7, for pax gesture service
+	register_android_server_paxgesture_PaxGestureService(env);
+	//[FEATURE]-Add-END by huling@paxsz.com 2022-6-7, for pax gesture service
     return JNI_VERSION_1_4;
 }
diff --git a/frameworks/base/services/java/com/android/server/SystemServer.java b/frameworks/base/services/java/com/android/server/SystemServer.java
index 3f78db9de2f..d29754988d4 100755
--- a/frameworks/base/services/java/com/android/server/SystemServer.java
+++ b/frameworks/base/services/java/com/android/server/SystemServer.java
@@ -206,7 +206,7 @@ import com.pax.server.PaxBatteryManagerService;
 import com.android.server.PaxSystemServer;
 import com.paxdroid.os.PaxTrafficServiceImpl;
 //[FEATURE]-Add-BEGIN by wufh@paxsz.com 2021-10-14, for start PaxSystemServer and PaxTrafficServiceImpl
-
+import com.android.server.paxgesture.PaxGestureService;
 
 public final class SystemServer {
 
@@ -1091,6 +1091,7 @@ public final class SystemServer {
         ConsumerIrService consumerIr = null;
         MmsServiceBroker mmsService = null;
         HardwarePropertiesManagerService hardwarePropertiesService = null;
+		PaxGestureService paxGestureService = null;
 
         boolean disableSystemTextClassifier = SystemProperties.getBoolean(
                 "config.disable_systemtextclassifier", false);
@@ -1306,6 +1307,16 @@ public final class SystemServer {
             t.traceEnd();
 		//ADD END by shanliangliang@paxsz.com add for BMS, 2021/07/12
 
+            //[FEATURE]-Add-BEGIN by huling@paxsz.com 2022-6-7, for pax gesture service
+            t.traceBegin("PaxGestureService");
+            try {
+                paxGestureService = new PaxGestureService(context);
+                ServiceManager.addService(Context.PAX_GESTURE_SERVICE, paxGestureService);
+            } catch (Throwable e) {
+                reportWtf("StartPaxGestureService", e);
+            }
+            t.traceEnd();
+            //[FEATURE]-Add-END by huling@paxsz.com 2022-6-7, for pax gesture service
         } catch (Throwable e) {
             Slog.e("System", "******************************************");
             Slog.e("System", "************ Failure starting core service");
diff --git a/kernel-4.19/drivers/input/touchscreen/mediatek/chsc5xxx/semi_touch_device.c b/kernel-4.19/drivers/input/touchscreen/mediatek/chsc5xxx/semi_touch_device.c
index d00de9403fd..0faf3643020 100755
--- a/kernel-4.19/drivers/input/touchscreen/mediatek/chsc5xxx/semi_touch_device.c
+++ b/kernel-4.19/drivers/input/touchscreen/mediatek/chsc5xxx/semi_touch_device.c
@@ -35,8 +35,8 @@ struct sm_touch_dev st_dev = {
 
 #if SEMI_TOUCH_GESTURE_OPEN
 #define PAX_TS_NAME "pax_tp"
-#define SET_GESTURE_ONOFF           _IOW('b', 0, int)
-#define SET_DEFAULT                 _IOW('b', 1, int)
+#define SET_GESTURE_OPEN           _IOW('b', 0, int)
+#define SET_GESTURE_CLOSE          _IOW('b', 1, int)
 static int tp_open(struct inode *inode, struct file *file)
 {
 	return 0;
@@ -49,36 +49,18 @@ static int tp_release(struct inode *inode, struct file *file)
 
 static long tp_ioctl(struct file *file, unsigned int cmd,
 				unsigned long arg)
-{
-	void __user *user_data = (void __user *)arg;
-	int ret = 0;
-	int en = 1;
+{
+	int ret = 0;
 
 	switch (cmd) {
-		case SET_GESTURE_ONOFF:
-			ret = copy_from_user(&en, user_data, sizeof(int));
-			if (ret < 0) {
-				kernel_log_d("CHSC5468 SET_GESTURE_ONOFF fail.\n");
-				ret = -1;
-				break;
-			}
-			if(en) {
-				kernel_log_d("open gesture: %d\n", en);
-				open_guesture_function(st_dev.stc.custom_function_en);
-			} else {
-				kernel_log_d("close gesture: %d\n", en);
-				close_guesture_function(st_dev.stc.custom_function_en);
-			}
-			break;
-		case SET_DEFAULT:
-			ret = copy_from_user(&en, user_data, sizeof(int));
-			if (ret < 0) {
-				kernel_log_d("SET_DEFAULT fail.\n");
-				ret = -1;
-				break;
-			}
-			kernel_log_d("SET_DEFAULT: %d\n", en);
-			break;
+		case SET_GESTURE_OPEN:
+			kernel_log_d("open gesture\n");
+			open_guesture_function(st_dev.stc.custom_function_en);
+			break;
+		case SET_GESTURE_CLOSE:
+			kernel_log_d("close gesture\n");
+			close_guesture_function(st_dev.stc.custom_function_en);
+			break;
 		default:
 			kernel_log_d("cmd: %u is not support.\n", cmd);
 			ret = -1;
diff --git a/vendor/mediatek/proprietary/packages/apps/MtkSettings/res/values/strings.xml b/vendor/mediatek/proprietary/packages/apps/MtkSettings/res/values/strings.xml
index cd0d6a1b0fb..06e4166f7ec 100755
--- a/vendor/mediatek/proprietary/packages/apps/MtkSettings/res/values/strings.xml
+++ b/vendor/mediatek/proprietary/packages/apps/MtkSettings/res/values/strings.xml
@@ -12153,10 +12153,10 @@
     <string name="cards_passes_setting_subtitle">To access things like your payment methods and boarding passes, press and hold the Power button.</string>
 
  	<!-- DoubleTapScreen setting title [CHAR LIMIT=NONE] -->
-    <string name="double_tap_awake_name">Double Tap Screen</string>
+    <string name="double_tap_awake_name">Single Tap To Wake Up</string>
     
      <!-- DoubleTapScreen setting summary [CHAR LIMIT=NONE] -->
-    <string name="double_tap_awake_summary">Double Tap Screen status</string>
+    <string name="double_tap_awake_summary">Single Tap Screen status</string>
 
 
     <!-- paxsz use -->
diff --git a/vendor/mediatek/proprietary/packages/apps/MtkSettings/src/com/android/settings/gestures/PaxDoubleTapAwakeGesturePreferenceController.java b/vendor/mediatek/proprietary/packages/apps/MtkSettings/src/com/android/settings/gestures/PaxDoubleTapAwakeGesturePreferenceController.java
index 32437d843df..8df5dade66a 100755
--- a/vendor/mediatek/proprietary/packages/apps/MtkSettings/src/com/android/settings/gestures/PaxDoubleTapAwakeGesturePreferenceController.java
+++ b/vendor/mediatek/proprietary/packages/apps/MtkSettings/src/com/android/settings/gestures/PaxDoubleTapAwakeGesturePreferenceController.java
@@ -26,6 +26,7 @@ import com.android.settings.core.BasePreferenceController;
 
 import android.util.Log;
 //import pax.util.PayDevManager;
+import com.pax.gesture.PaxGestureManager;
 import java.io.IOException;
 import android.os.SystemProperties;
 
@@ -38,10 +39,12 @@ public class PaxDoubleTapAwakeGesturePreferenceController extends BasePreference
 	public static final String double_tap_awake_status = "persist.sys.ctrl.tp.gesture";
     private static int value = 0;
     //public PayDevManager mPayDevManager;
+	private PaxGestureManager mPaxGestureManager;
 
     public PaxDoubleTapAwakeGesturePreferenceController(Context context) {
         super(context,KEY_DOUBLE_TAP_AWAKE);
         //mPayDevManager = PayDevManager.getInstance(context);
+		mPaxGestureManager = (PaxGestureManager) context.getSystemService(Context.PAX_GESTURE_SERVICE);
 		Log.d(TAG,"start");
     }
 
@@ -68,10 +71,12 @@ public class PaxDoubleTapAwakeGesturePreferenceController extends BasePreference
         try{
             if(powerEnabled){
                 //ret = mPayDevManager.startPaxGesture();
+				ret = mPaxGestureManager.openGesture();
 				SystemProperties.set(double_tap_awake_status,"1");
             }
             else {
                 //ret = mPayDevManager.stopPaxGesture();
+				ret = mPaxGestureManager.closeGesture();
 				SystemProperties.set(double_tap_awake_status,"0");
             }
         }catch (Exception e) {
-- 
2.17.1

